// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/clarifai/auth/types/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Authorization type for endpoints.
public enum Clarifai_Auth_Types_AuthType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// introduce undef so that the zero (default/unset) value of the enum is not a real
  /// permission.  undef is only present for this purpose and should not be used
  /// to indicate any "real" value.
  case undef // = 0

  /// No authorization need for this endpoint.
  case noAuth // = 1

  /// This authorization requires API keys (both app-spceific keys and personal access tokens).
  /// The endpoints that use this AuthType may also include a list of
  /// clarifai.auth.utils.cl_depending_scopes.
  case keyAuth // = 2

  /// This uses a session token from your web browser. This is reserved for users/account level APIs
  /// that are only needed in a browser.
  case sessionTokenAuth // = 3

  /// This uses a special token for admin access to the APIs.
  case adminAuth // = 4

  /// This authorization requires personal access tokens. This is used for endpoints such as
  /// /users/{user_id}/apps which are not specific. An app-specific API key will not work
  /// when PATAuth is used.
  case patauth // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .undef
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undef
    case 1: self = .noAuth
    case 2: self = .keyAuth
    case 3: self = .sessionTokenAuth
    case 4: self = .adminAuth
    case 5: self = .patauth
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .undef: return 0
    case .noAuth: return 1
    case .keyAuth: return 2
    case .sessionTokenAuth: return 3
    case .adminAuth: return 4
    case .patauth: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Clarifai_Auth_Types_AuthType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Clarifai_Auth_Types_AuthType] = [
    .undef,
    .noAuth,
    .keyAuth,
    .sessionTokenAuth,
    .adminAuth,
    .patauth,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Clarifai_Auth_Types_AuthType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "undef"),
    1: .same(proto: "NoAuth"),
    2: .same(proto: "KeyAuth"),
    3: .same(proto: "SessionTokenAuth"),
    4: .same(proto: "AdminAuth"),
    5: .same(proto: "PATAuth"),
  ]
}
