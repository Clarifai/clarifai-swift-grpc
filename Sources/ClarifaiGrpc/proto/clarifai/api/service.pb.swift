// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/clarifai/api/service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Split the results into pages.
public struct Clarifai_Api_Pagination {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// (optional URL parameter) The page number. Pagination is used to split the results into chunks. Defaults to 1.
  public var page: UInt32 = 0

  /// (optional URL parameter) The number of results that will be contained in each page. Defaults to 10.
  public var perPage: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/////////////////////////////////////////////////////////////////////////////////
/// Requests / Responses from /proto/clarifai/api/annotation.proto
/////////////////////////////////////////////////////////////////////////////////
public struct Clarifai_Api_GetAnnotationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var annotationID: String = String()

  public var inputID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_ListAnnotationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// List annotations for these IDs
  public var ids: [String] = []

  /// List annotations for these Input IDs
  /// Note that 'ids' are optional but if the are provided the number and order in
  /// 'ids' and 'input_ids' should match
  /// If you do not specify 'ids' all the annotations for 'input_ids' are returned
  /// If a you do not specify both 'input_ids' and 'ids' all the annotations in the app are returned
  public var inputIds: [String] = []

  /// Only return the annotations that has one of these user IDs, effectively operating as an
  /// OR among them to filter down the results.
  /// If model_version_ids are also provided these user_ids are OR'd with them as well since
  /// annotations are either provided by users or model versions and we want the union of any
  /// provided user or model version annotations in the results of ListAnnotations request.
  /// If no user_ids are provided then annotations from all users are returned.
  public var userIds: [String] = []

  /// Only return the annotations that has one of these model version IDs, effectively operating as an
  /// OR among them to filter down the results.
  /// If user_ids are also provided these model_versions_ids are OR'd with them as well since
  /// annotations are either provided by users or model versions and we want the union of any
  /// provided user or model version annotations in the results of ListAnnotations request.
  /// If no model_version_ids are provided then annotations from all model versions are returned.
  public var modelVersionIds: [String] = []

  /// Set status to filter by a list of statuses
  /// If not statuses are provided then annotations with any status will be returned.
  public var statuses: [Clarifai_Api_Status_Status] = []

  /// Set this flag to list both trusted and not trusted annotations
  /// by default it's listing only trusted annotations
  public var listAllAnnotations: Bool = false

  public var page: UInt32 = 0

  public var perPage: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PostAnnotationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var annotations: [Clarifai_Api_Annotation] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PatchAnnotationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var annotations: [Clarifai_Api_Annotation] = []

  /// The action to perform on the patched objects
  /// For now actions 'merge', 'overwrite', and 'remove' are supported
  public var action: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_DeleteAnnotationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var inputID: String = String()

  public var annotationID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Request to delete several things by the list of ids.
public struct Clarifai_Api_DeleteAnnotationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// Delete annotations with IDs
  public var ids: [String] = []

  /// Delete annotations for these Input IDs
  /// Note that 'ids' are optional but if the are provided the number and order in
  /// 'ids' and 'input_ids' should match
  /// If you do not specifiy 'ids' all the annotations for 'input_ids' are deleted
  /// However you need to specify at least one value for 'input_ids'
  /// i.e. this API does not support deleting all annotations
  public var inputIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_SingleAnnotationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var annotation: Clarifai_Api_Annotation {
    get {return _annotation ?? Clarifai_Api_Annotation()}
    set {_annotation = newValue}
  }
  /// Returns true if `annotation` has been explicitly set.
  public var hasAnnotation: Bool {return self._annotation != nil}
  /// Clears the value of `annotation`. Subsequent reads from it will return its default value.
  public mutating func clearAnnotation() {self._annotation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _annotation: Clarifai_Api_Annotation? = nil
}

public struct Clarifai_Api_MultiAnnotationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var annotations: [Clarifai_Api_Annotation] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

/////////////////////////////////////////////////////////////////////////////////
/// Requests / Responses from /proto/clarifai/api/app.proto
/////////////////////////////////////////////////////////////////////////////////
public struct Clarifai_Api_GetAppRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_ListAppsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
  /// Defaults to 1.
  public var page: UInt32 = 0

  /// (optional URL parameter) The number of results that will be contained in each page. Defaults
  /// to 10.
  public var perPage: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PostAppsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var apps: [Clarifai_Api_App] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_DeleteAppRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PatchAppsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var apps: [Clarifai_Api_App] = []

  /// The action to perform on the patched App objects except App.Metadata
  /// For now only action 'overwrite' is supported
  public var action: String = String()

  /// The action to perform on the patched App.Metadata
  public var metadataAction: Clarifai_Api_PatchAction {
    get {return _metadataAction ?? Clarifai_Api_PatchAction()}
    set {_metadataAction = newValue}
  }
  /// Returns true if `metadataAction` has been explicitly set.
  public var hasMetadataAction: Bool {return self._metadataAction != nil}
  /// Clears the value of `metadataAction`. Subsequent reads from it will return its default value.
  public mutating func clearMetadataAction() {self._metadataAction = nil}

  /// If set, the app will be automatically reindexed upon change of its base workflow.
  public var reindex: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _metadataAction: Clarifai_Api_PatchAction? = nil
}

/// Search over the available applications.
public struct Clarifai_Api_PostAppsSearchesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// The body of the request.
  public var appQuery: Clarifai_Api_AppQuery {
    get {return _appQuery ?? Clarifai_Api_AppQuery()}
    set {_appQuery = newValue}
  }
  /// Returns true if `appQuery` has been explicitly set.
  public var hasAppQuery: Bool {return self._appQuery != nil}
  /// Clears the value of `appQuery`. Subsequent reads from it will return its default value.
  public mutating func clearAppQuery() {self._appQuery = nil}

  /// Pagination parameters here since there are no url args in this
  /// POST request.
  public var pagination: Clarifai_Api_Pagination {
    get {return _pagination ?? Clarifai_Api_Pagination()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  public var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  public mutating func clearPagination() {self._pagination = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _appQuery: Clarifai_Api_AppQuery? = nil
  fileprivate var _pagination: Clarifai_Api_Pagination? = nil
}

public struct Clarifai_Api_SingleAppResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var app: Clarifai_Api_App {
    get {return _app ?? Clarifai_Api_App()}
    set {_app = newValue}
  }
  /// Returns true if `app` has been explicitly set.
  public var hasApp: Bool {return self._app != nil}
  /// Clears the value of `app`. Subsequent reads from it will return its default value.
  public mutating func clearApp() {self._app = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _app: Clarifai_Api_App? = nil
}

public struct Clarifai_Api_MultiAppResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var apps: [Clarifai_Api_App] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

/////////////////////////////////////////////////////////////////////////////////
/// Requests / Responses from /proto/clarifai/api/app_sharing.proto
/////////////////////////////////////////////////////////////////////////////////
public struct Clarifai_Api_ListCollaboratorsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// Set this flag to list both deleted and not deleted collaborators
  /// by default it's listing only not deleted collaborators
  public var listAllCollaborators: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PostCollaboratorsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var collaborators: [Clarifai_Api_Collaborator] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PatchCollaboratorsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var collaborators: [Clarifai_Api_Collaborator] = []

  /// The action to perform on the patched objects
  /// For now only action 'overwrite' is supported
  public var action: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_DeleteCollaboratorsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var collaboratorIds: [String] = []

  public var userEmails: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_MultiCollaboratorsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var collaborators: [Clarifai_Api_Collaborator] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

public struct Clarifai_Api_ListCollaborationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var page: UInt32 = 0

  public var perPage: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_MultiCollaborationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var collaborations: [Clarifai_Api_Collaboration] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

/////////////////////////////////////////////////////////////////////////////////
/// Requests / Responses from /proto/clarifai/api/code.proto
/////////////////////////////////////////////////////////////////////////////////
public struct Clarifai_Api_GetStatusCodeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var statusCodeID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clarifai_Api_ListStatusCodesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clarifai_Api_SingleStatusCodeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Status of this request.
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

public struct Clarifai_Api_MultiStatusCodeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var statuses: [Clarifai_Api_Status_Status] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

/////////////////////////////////////////////////////////////////////////////////
/// Requests / Responses from /proto/clarifai/api/concept.proto
/////////////////////////////////////////////////////////////////////////////////
public struct Clarifai_Api_GetConceptRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// The concept's id.
  public var conceptID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_ListConceptsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
  /// Defaults to 1.
  public var page: UInt32 = 0

  /// (optional URL parameter) The number of results that will be contained in each page. Defaults
  /// to 10.
  public var perPage: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PostConceptsSearchesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Ids present in the url of the request.
  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// The body of the request.
  public var conceptQuery: Clarifai_Api_ConceptQuery {
    get {return _conceptQuery ?? Clarifai_Api_ConceptQuery()}
    set {_conceptQuery = newValue}
  }
  /// Returns true if `conceptQuery` has been explicitly set.
  public var hasConceptQuery: Bool {return self._conceptQuery != nil}
  /// Clears the value of `conceptQuery`. Subsequent reads from it will return its default value.
  public mutating func clearConceptQuery() {self._conceptQuery = nil}

  /// Pagination parameters here since there are no url args in this
  /// POST request.
  public var pagination: Clarifai_Api_Pagination {
    get {return _pagination ?? Clarifai_Api_Pagination()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  public var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  public mutating func clearPagination() {self._pagination = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _conceptQuery: Clarifai_Api_ConceptQuery? = nil
  fileprivate var _pagination: Clarifai_Api_Pagination? = nil
}

public struct Clarifai_Api_PostConceptsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// The concepts to add.
  public var concepts: [Clarifai_Api_Concept] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PatchConceptsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// The concepts to patch.
  public var concepts: [Clarifai_Api_Concept] = []

  /// The action to perform on the patched objects
  /// For now ony action 'overwrite' is supported
  public var action: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_GetConceptCountsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
  /// Defaults to 1.
  public var page: UInt32 = 0

  /// (optional URL parameter) The number of results that will be contained in each page. Defaults
  /// to 10.
  public var perPage: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_SingleConceptResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The response status.
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// The returned concept.
  public var concept: Clarifai_Api_Concept {
    get {return _concept ?? Clarifai_Api_Concept()}
    set {_concept = newValue}
  }
  /// Returns true if `concept` has been explicitly set.
  public var hasConcept: Bool {return self._concept != nil}
  /// Clears the value of `concept`. Subsequent reads from it will return its default value.
  public mutating func clearConcept() {self._concept = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _concept: Clarifai_Api_Concept? = nil
}

public struct Clarifai_Api_MultiConceptResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The response status.
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// The returned concepts.
  public var concepts: [Clarifai_Api_Concept] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

public struct Clarifai_Api_MultiConceptCountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The response status.
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// The returned concept counts.
  public var conceptCounts: [Clarifai_Api_ConceptCount] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

/////////////////////////////////////////////////////////////////////////////////
/// Requests / Responses from /proto/clarifai/api/concept_graph.proto
/////////////////////////////////////////////////////////////////////////////////
///////////////////////
/// Responses
///////////////////////
/// Requests
///////////////////////
/// GET all relations such that the concept_id refers to the subject of the relation
public struct Clarifai_Api_ListConceptRelationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The user_id and app_id information.
  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// The subject concept id in your app to get all the relationships for.
  public var conceptID: String = String()

  /// This is part of the url so we can extend to multiple link types in the future.
  /// Valid predicates are:
  /// 'hypernyms'
  /// 'hyponyms'
  public var predicate: String = String()

  /// This identifies the subgraph you want to search over, if any.
  public var knowledgeGraphID: String = String()

  /// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
  /// Defaults to 1.
  public var page: UInt32 = 0

  /// (optional URL parameter) The number of results that will be contained in each page. Defaults
  /// to 10.
  public var perPage: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// POST new concept relations
public struct Clarifai_Api_PostConceptRelationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The user_id and app_id information.
  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// The subject concept id you're going to add relations for.
  public var conceptID: String = String()

  /// The relationships you're going to add.
  public var conceptRelations: [Clarifai_Api_ConceptRelation] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// DELETE concept relations
public struct Clarifai_Api_DeleteConceptRelationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The user_id and app_id information.
  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// The concept to delete relationship for.
  public var conceptID: String = String()

  /// The concept relationship ids to delete.
  public var ids: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// GET all knowledge graphs
public struct Clarifai_Api_ListKnowledgeGraphsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The user_id and app_id information.
  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// POST new knowledge graphs
public struct Clarifai_Api_PostKnowledgeGraphsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The user_id and app_id information.
  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var knowledgeGraphs: [Clarifai_Api_KnowledgeGraph] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Start concept mapping jobs
public struct Clarifai_Api_PostConceptMappingJobsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The user_id and app_id information.
  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// The concept mapping jobs that are being started
  public var conceptMappingJobs: [Clarifai_Api_ConceptMappingJob] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_MultiConceptRelationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The response status.
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// The returned concept relations.
  public var conceptRelations: [Clarifai_Api_ConceptRelation] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

public struct Clarifai_Api_MultiKnowledgeGraphResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The response status.
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// The returned knowledge graphs.
  public var knowledgeGraphs: [Clarifai_Api_KnowledgeGraph] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

public struct Clarifai_Api_MultiConceptMappingJobResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The response status.
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// The ids of the concept mapping jobs underway.
  public var ids: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

/////////////////////////////////////////////////////////////////////////////////
/// Requests / Responses from /proto/clarifai/api/concept_language.proto
/////////////////////////////////////////////////////////////////////////////////
/// GET single concept language for the given concept.
public struct Clarifai_Api_GetConceptLanguageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var conceptID: String = String()

  /// This is the language identifier.
  public var language: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// List multiple concept languages for the given concept.
public struct Clarifai_Api_ListConceptLanguagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var conceptID: String = String()

  /// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
  /// Defaults to 1.
  public var page: UInt32 = 0

  /// (optional URL parameter) The number of results that will be contained in each page. Defaults
  /// to 10.
  public var perPage: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// PATCH multiple concept languages for the given concept.
public struct Clarifai_Api_PatchConceptLanguagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var conceptID: String = String()

  public var conceptLanguages: [Clarifai_Api_ConceptLanguage] = []

  /// The action to perform with the objects in the PATCH.
  public var action: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// POST multiple concept languages for the given concept.
public struct Clarifai_Api_PostConceptLanguagesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var conceptID: String = String()

  public var conceptLanguages: [Clarifai_Api_ConceptLanguage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_SingleConceptLanguageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var conceptLanguage: Clarifai_Api_ConceptLanguage {
    get {return _conceptLanguage ?? Clarifai_Api_ConceptLanguage()}
    set {_conceptLanguage = newValue}
  }
  /// Returns true if `conceptLanguage` has been explicitly set.
  public var hasConceptLanguage: Bool {return self._conceptLanguage != nil}
  /// Clears the value of `conceptLanguage`. Subsequent reads from it will return its default value.
  public mutating func clearConceptLanguage() {self._conceptLanguage = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _conceptLanguage: Clarifai_Api_ConceptLanguage? = nil
}

public struct Clarifai_Api_MultiConceptLanguageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var conceptLanguages: [Clarifai_Api_ConceptLanguage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

/////////////////////////////////////////////////////////////////////////////////
/// Requests / Responses from /proto/clarifai/api/input.proto
/////////////////////////////////////////////////////////////////////////////////
public struct Clarifai_Api_GetInputRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var inputID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_ListInputsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
  /// Defaults to 1.
  public var page: UInt32 = 0

  /// (optional URL parameter) The number of results that will be contained in each page. Defaults
  /// to 10.
  public var perPage: UInt32 = 0

  /// Set status to filter by status
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var ids: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

public struct Clarifai_Api_StreamInputsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var perPage: UInt32 = 0

  public var lastID: String = String()

  public var descending: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PostInputsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var inputs: [Clarifai_Api_Input] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PatchInputsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var inputs: [Clarifai_Api_Input] = []

  /// The action to perform on the patched objects
  /// For now actions 'merge', 'overwrite', and 'remove' are supported
  public var action: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_DeleteInputRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var inputID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Request to delete several things by the list of ids.
public struct Clarifai_Api_DeleteInputsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var ids: [String] = []

  public var deleteAll: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_SingleInputResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var input: Clarifai_Api_Input {
    get {return _input ?? Clarifai_Api_Input()}
    set {_input = newValue}
  }
  /// Returns true if `input` has been explicitly set.
  public var hasInput: Bool {return self._input != nil}
  /// Clears the value of `input`. Subsequent reads from it will return its default value.
  public mutating func clearInput() {self._input = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _input: Clarifai_Api_Input? = nil
}

public struct Clarifai_Api_MultiInputResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var inputs: [Clarifai_Api_Input] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

public struct Clarifai_Api_SingleInputCountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// NOTE: inconsistency: not named after the object name.
  public var counts: Clarifai_Api_InputCount {
    get {return _counts ?? Clarifai_Api_InputCount()}
    set {_counts = newValue}
  }
  /// Returns true if `counts` has been explicitly set.
  public var hasCounts: Bool {return self._counts != nil}
  /// Clears the value of `counts`. Subsequent reads from it will return its default value.
  public mutating func clearCounts() {self._counts = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _counts: Clarifai_Api_InputCount? = nil
}

public struct Clarifai_Api_GetInputCountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/////////////////////////////////////////////////////
/// Model prediction related stuff needs inputs and produces outputs.
/////////////////////////////////////////////////////
/// Model prediction.
public struct Clarifai_Api_PostModelOutputsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var modelID: String = String()

  public var versionID: String = String()

  public var inputs: [Clarifai_Api_Input] = []

  /// This allows you to specify config options for the model such as
  /// the language which appear's in the model's output_info.
  public var model: Clarifai_Api_Model {
    get {return _model ?? Clarifai_Api_Model()}
    set {_model = newValue}
  }
  /// Returns true if `model` has been explicitly set.
  public var hasModel: Bool {return self._model != nil}
  /// Clears the value of `model`. Subsequent reads from it will return its default value.
  public mutating func clearModel() {self._model = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _model: Clarifai_Api_Model? = nil
}

/// Listing the inputs that went into training this model.
public struct Clarifai_Api_ListModelInputsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var modelID: String = String()

  public var versionID: String = String()

  /// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
  /// Defaults to 1.
  public var page: UInt32 = 0

  /// (optional URL parameter) The number of results that will be contained in each page. Defaults
  /// to 10.
  public var perPage: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/////////////////////////////////////////////////////////////////////////////////
/// Requests / Responses from /proto/clarifai/api/key.proto
/////////////////////////////////////////////////////////////////////////////////
public struct Clarifai_Api_GetKeyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var keyID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_ListKeysRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
  /// Defaults to 1.
  public var page: UInt32 = 0

  /// (optional URL parameter) The number of results that will be contained in each page. Defaults
  /// to 10.
  public var perPage: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_ListAppKeysRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
  /// Defaults to 1.
  public var page: UInt32 = 0

  /// (optional URL parameter) The number of results that will be contained in each page. Defaults
  /// to 10.
  public var perPage: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PostKeysRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var keys: [Clarifai_Api_Key] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_DeleteKeyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var keyID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PatchKeysRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var keys: [Clarifai_Api_Key] = []

  /// The action to perform on the patched objects
  /// For now only action 'overwrite' is supported
  public var action: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_SingleKeyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var key: Clarifai_Api_Key {
    get {return _key ?? Clarifai_Api_Key()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {self._key = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _key: Clarifai_Api_Key? = nil
}

public struct Clarifai_Api_MultiKeyResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var keys: [Clarifai_Api_Key] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

/////////////////////////////////////////////////////////////////////////////////
/// Requests / Responses from /proto/clarifai/api/model.proto
/////////////////////////////////////////////////////////////////////////////////
public struct Clarifai_Api_GetModelRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var modelID: String = String()

  /// This is included so that we can re-use this request for multiple
  /// rpcs with and without the version_id.
  public var versionID: String = String()

  public var language: String = String()

  public var trainedBefore: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_ListModelsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
  /// Defaults to 1.
  public var page: UInt32 = 0

  /// (optional URL parameter) The number of results that will be contained in each page. Defaults
  /// to 10.
  public var perPage: UInt32 = 0

  public var ids: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PostModelsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// NOTE: inconsistent since "model" is not plural, please use "models" below.
  /// Previously you could only create one model at a time.
  /// We still support this but you should pass it as models=[model] so
  /// that this endpoint is consistent with the rest of our API.
  public var model: Clarifai_Api_Model {
    get {return _model ?? Clarifai_Api_Model()}
    set {_model = newValue}
  }
  /// Returns true if `model` has been explicitly set.
  public var hasModel: Bool {return self._model != nil}
  /// Clears the value of `model`. Subsequent reads from it will return its default value.
  public mutating func clearModel() {self._model = nil}

  /// This allows you to create one or more model by posting it to the API.
  public var models: [Clarifai_Api_Model] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _model: Clarifai_Api_Model? = nil
}

public struct Clarifai_Api_PatchModelsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var models: [Clarifai_Api_Model] = []

  /// The action to perform on the patched objects
  /// For now actions 'merge', 'overwrite', and 'remove' are supported
  public var action: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_DeleteModelRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var modelID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Request to delete several things by the list of ids.
public struct Clarifai_Api_DeleteModelsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var ids: [String] = []

  public var deleteAll: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Search over the available models.
public struct Clarifai_Api_PostModelsSearchesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Ids present in the url of the request.
  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// The body of the request.
  public var modelQuery: Clarifai_Api_ModelQuery {
    get {return _modelQuery ?? Clarifai_Api_ModelQuery()}
    set {_modelQuery = newValue}
  }
  /// Returns true if `modelQuery` has been explicitly set.
  public var hasModelQuery: Bool {return self._modelQuery != nil}
  /// Clears the value of `modelQuery`. Subsequent reads from it will return its default value.
  public mutating func clearModelQuery() {self._modelQuery = nil}

  /// Pagination parameters here since there are no url args in this
  /// POST request.
  public var pagination: Clarifai_Api_Pagination {
    get {return _pagination ?? Clarifai_Api_Pagination()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  public var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  public mutating func clearPagination() {self._pagination = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _modelQuery: Clarifai_Api_ModelQuery? = nil
  fileprivate var _pagination: Clarifai_Api_Pagination? = nil
}

public struct Clarifai_Api_SingleModelResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var model: Clarifai_Api_Model {
    get {return _model ?? Clarifai_Api_Model()}
    set {_model = newValue}
  }
  /// Returns true if `model` has been explicitly set.
  public var hasModel: Bool {return self._model != nil}
  /// Clears the value of `model`. Subsequent reads from it will return its default value.
  public mutating func clearModel() {self._model = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _model: Clarifai_Api_Model? = nil
}

public struct Clarifai_Api_MultiModelResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var models: [Clarifai_Api_Model] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

/////////////////////////////////////////////////////////////////////////////////
/// Requests / Responses from /proto/clarifai/api/model_version.proto
/////////////////////////////////////////////////////////////////////////////////
/// NOTE: this is same as GetModelRequest but backend doesn't support sharing same
/// request for different endpoints currently.
public struct Clarifai_Api_GetModelVersionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var modelID: String = String()

  public var versionID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_ListModelVersionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var modelID: String = String()

  /// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
  /// Defaults to 1.
  public var page: UInt32 = 0

  /// (optional URL parameter) The number of results that will be contained in each page. Defaults
  /// to 10.
  public var perPage: UInt32 = 0

  /// To list only the model versions that have these concept ids present in them.
  public var conceptIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_DeleteModelVersionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var modelID: String = String()

  public var versionID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_SingleModelVersionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var modelVersion: Clarifai_Api_ModelVersion {
    get {return _modelVersion ?? Clarifai_Api_ModelVersion()}
    set {_modelVersion = newValue}
  }
  /// Returns true if `modelVersion` has been explicitly set.
  public var hasModelVersion: Bool {return self._modelVersion != nil}
  /// Clears the value of `modelVersion`. Subsequent reads from it will return its default value.
  public mutating func clearModelVersion() {self._modelVersion = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _modelVersion: Clarifai_Api_ModelVersion? = nil
}

public struct Clarifai_Api_MultiModelVersionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var modelVersions: [Clarifai_Api_ModelVersion] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

/// Create (train) a new model version.
public struct Clarifai_Api_PostModelVersionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var modelID: String = String()

  /// This lets you post an existing model version rather than training a new one.
  /// For internal Clarifai use only to start.
  public var modelVersions: [Clarifai_Api_ModelVersion] = []

  /// Use this to filter inputs that are used in training
  public var search: Clarifai_Api_Search {
    get {return _search ?? Clarifai_Api_Search()}
    set {_search = newValue}
  }
  /// Returns true if `search` has been explicitly set.
  public var hasSearch: Bool {return self._search != nil}
  /// Clears the value of `search`. Subsequent reads from it will return its default value.
  public mutating func clearSearch() {self._search = nil}

  ///train_search is used to specify what data to train on.
  public var trainSearch: Clarifai_Api_Search {
    get {return _trainSearch ?? Clarifai_Api_Search()}
    set {_trainSearch = newValue}
  }
  /// Returns true if `trainSearch` has been explicitly set.
  public var hasTrainSearch: Bool {return self._trainSearch != nil}
  /// Clears the value of `trainSearch`. Subsequent reads from it will return its default value.
  public mutating func clearTrainSearch() {self._trainSearch = nil}

  ///test_search is used to specify what data to test on.
  public var testSearch: Clarifai_Api_Search {
    get {return _testSearch ?? Clarifai_Api_Search()}
    set {_testSearch = newValue}
  }
  /// Returns true if `testSearch` has been explicitly set.
  public var hasTestSearch: Bool {return self._testSearch != nil}
  /// Clears the value of `testSearch`. Subsequent reads from it will return its default value.
  public mutating func clearTestSearch() {self._testSearch = nil}

  /// whether to evaluate the transfer trained model after training
  public var evaluateAfterTraining: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _search: Clarifai_Api_Search? = nil
  fileprivate var _trainSearch: Clarifai_Api_Search? = nil
  fileprivate var _testSearch: Clarifai_Api_Search? = nil
}

/// Evaluate this model version.
public struct Clarifai_Api_PostModelVersionMetricsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var modelID: String = String()

  public var versionID: String = String()

  public var maxExamples: UInt32 = 0

  /// Use this to filter inputs that are used in evaluation
  public var testSearch: Clarifai_Api_Search {
    get {return _testSearch ?? Clarifai_Api_Search()}
    set {_testSearch = newValue}
  }
  /// Returns true if `testSearch` has been explicitly set.
  public var hasTestSearch: Bool {return self._testSearch != nil}
  /// Clears the value of `testSearch`. Subsequent reads from it will return its default value.
  public mutating func clearTestSearch() {self._testSearch = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _testSearch: Clarifai_Api_Search? = nil
}

/// Get the already computed evaluation metrics for this model
/// version.
public struct Clarifai_Api_GetModelVersionMetricsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var modelID: String = String()

  public var versionID: String = String()

  /// Any of the fields you wish to return from multiclass_metrics
  public var fields: Clarifai_Api_FieldsValue {
    get {return _fields ?? Clarifai_Api_FieldsValue()}
    set {_fields = newValue}
  }
  /// Returns true if `fields` has been explicitly set.
  public var hasFields: Bool {return self._fields != nil}
  /// Clears the value of `fields`. Subsequent reads from it will return its default value.
  public mutating func clearFields() {self._fields = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _fields: Clarifai_Api_FieldsValue? = nil
}

public struct Clarifai_Api_GetModelTypeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// use and app combo. Not really used for this endpoint at this time so may go away in future.
  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// The specific ModelType.Id you want to retrieve.
  public var modelTypeID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_ListModelTypesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// use and app combo. Not really used for this endpoint at this time so may go away in future.
  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
  /// Defaults to 1.
  public var page: UInt32 = 0

  /// (optional URL parameter) The number of results that will be contained in each page. Defaults
  /// to 10.
  public var perPage: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_SingleModelTypeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Status of the response.
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// The retrieved ModelType object. .
  public var modelType: Clarifai_Api_ModelType {
    get {return _modelType ?? Clarifai_Api_ModelType()}
    set {_modelType = newValue}
  }
  /// Returns true if `modelType` has been explicitly set.
  public var hasModelType: Bool {return self._modelType != nil}
  /// Clears the value of `modelType`. Subsequent reads from it will return its default value.
  public mutating func clearModelType() {self._modelType = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _modelType: Clarifai_Api_ModelType? = nil
}

public struct Clarifai_Api_MultiModelTypeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Status of the response.
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// List of ModelType objects.
  public var modelTypes: [Clarifai_Api_ModelType] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

/////////////////////////////////////////////////////////////////////////////////
/// Requests / Responses from /proto/clarifai/api/output.proto
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////
/// Outputs related requests
/////////////////////////////////////////////////////
public struct Clarifai_Api_MultiOutputResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var outputs: [Clarifai_Api_Output] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

/////////////////////////////////////////////////////////////////////////////////
/// Requests / Responses from /proto/clarifai/api/scope.proto
/////////////////////////////////////////////////////////////////////////////////
public struct Clarifai_Api_ListScopesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If "personal_access_token" include scopes and endpoints available to personal access tokens.
  /// If "api_key" include scopes and endpoints available to app-specific keys. (default)
  public var keyType: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clarifai_Api_MyScopesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_MultiScopeDepsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The status of the request.
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// scopes is a list of low-level scopes and their dependencies.
  public var scopeDeps: [Clarifai_Api_ScopeDeps] = []

  /// endpoint_scopes is a listof all the publicly available endponts which can be
  /// used as scopes as well. A call to each of those endpoint depends on a subset
  /// of the above "scopes"
  public var endpointDeps: [Clarifai_Api_EndpointDeps] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

public struct Clarifai_Api_MultiScopeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The status of the request.
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// This is a list of the scopes that your key has.
  public var scopes: [String] = []

  /// The app that the key has access to.
  public var app: Clarifai_Api_App {
    get {return _app ?? Clarifai_Api_App()}
    set {_app = newValue}
  }
  /// Returns true if `app` has been explicitly set.
  public var hasApp: Bool {return self._app != nil}
  /// Clears the value of `app`. Subsequent reads from it will return its default value.
  public mutating func clearApp() {self._app = nil}

  /// This is a list of endpoint permissions that your key has.
  public var endpoints: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _app: Clarifai_Api_App? = nil
}

/////////////////////////////////////////////////////////////////////////////////
/// Requests / Responses from /proto/clarifai/api/search.proto
/////////////////////////////////////////////////////////////////////////////////
public struct Clarifai_Api_GetSearchRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_ListSearchesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var page: UInt32 = 0

  public var perPage: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PostSearchesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The user_id and app_id to query from.
  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// The query; this specifies how the data to be searched
  /// this will be replaced by "Searches"
  public var query: Clarifai_Api_Query {
    get {return _query ?? Clarifai_Api_Query()}
    set {_query = newValue}
  }
  /// Returns true if `query` has been explicitly set.
  public var hasQuery: Bool {return self._query != nil}
  /// Clears the value of `query`. Subsequent reads from it will return its default value.
  public mutating func clearQuery() {self._query = nil}

  /// The searched to be executed or saved
  /// Eventually the request level fields will be deprecated in favor of this object
  public var searches: [Clarifai_Api_Search] = []

  /// Pagination information to paginate through search result Hits.
  public var pagination: Clarifai_Api_Pagination {
    get {return _pagination ?? Clarifai_Api_Pagination()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  public var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  public mutating func clearPagination() {self._pagination = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _query: Clarifai_Api_Query? = nil
  fileprivate var _pagination: Clarifai_Api_Pagination? = nil
}

/// PostSearchesByIDRequest performs returns results of a saved search given its ID
public struct Clarifai_Api_PostSearchesByIDRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// ID for saves search to be executed
  public var id: String = String()

  /// Pagination information to paginate through search result Hits.
  public var pagination: Clarifai_Api_Pagination {
    get {return _pagination ?? Clarifai_Api_Pagination()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  public var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  public mutating func clearPagination() {self._pagination = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _pagination: Clarifai_Api_Pagination? = nil
}

public struct Clarifai_Api_DeleteSearchRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Execute a new annotation search and optionally save it
/// annotation search over annotations using rank and filter proto
public struct Clarifai_Api_PostAnnotationsSearchesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The user_id and app_id to query from.
  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// The searched to be executed or saved
  public var searches: [Clarifai_Api_Search] = []

  /// Pagination information to paginate through search result Hits.
  public var pagination: Clarifai_Api_Pagination {
    get {return _pagination ?? Clarifai_Api_Pagination()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  public var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  public mutating func clearPagination() {self._pagination = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _pagination: Clarifai_Api_Pagination? = nil
}

public struct Clarifai_Api_DeleteAnnotationSearchMetricsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Execute a new input search and optionally save it
public struct Clarifai_Api_PostInputsSearchesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The user_id and app_id to query from.
  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// The searched to be executed or saved
  public var searches: [Clarifai_Api_Search] = []

  /// Pagination information to paginate through search result Hits.
  public var pagination: Clarifai_Api_Pagination {
    get {return _pagination ?? Clarifai_Api_Pagination()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  public var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  public mutating func clearPagination() {self._pagination = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _pagination: Clarifai_Api_Pagination? = nil
}

/// SingleSearchResponse returns saved search in response to GetSearchRequest
public struct Clarifai_Api_SingleSearchResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Status of whether the search was successful.
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var search: Clarifai_Api_Search {
    get {return _search ?? Clarifai_Api_Search()}
    set {_search = newValue}
  }
  /// Returns true if `search` has been explicitly set.
  public var hasSearch: Bool {return self._search != nil}
  /// Clears the value of `search`. Subsequent reads from it will return its default value.
  public mutating func clearSearch() {self._search = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _search: Clarifai_Api_Search? = nil
}

public struct Clarifai_Api_MultiSearchResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Status of whether the search was successful.
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// A unique id which uniquely identifies a search
  public var id: String = String()

  /// The list of search result Hits.
  public var hits: [Clarifai_Api_Hit] = []

  /// The original query provided in the request.
  public var query: Clarifai_Api_Query {
    get {return _query ?? Clarifai_Api_Query()}
    set {_query = newValue}
  }
  /// Returns true if `query` has been explicitly set.
  public var hasQuery: Bool {return self._query != nil}
  /// Clears the value of `query`. Subsequent reads from it will return its default value.
  public mutating func clearQuery() {self._query = nil}

  /// The original Searches provided in the request.
  public var searches: [Clarifai_Api_Search] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _query: Clarifai_Api_Query? = nil
}

public struct Clarifai_Api_PostAnnotationSearchMetricsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// A unique customer facing id to identify this eval request
  public var id: String = String()

  /// The ground truth we are evaluating against
  public var groundTruth: Clarifai_Api_Search {
    get {return _groundTruth ?? Clarifai_Api_Search()}
    set {_groundTruth = newValue}
  }
  /// Returns true if `groundTruth` has been explicitly set.
  public var hasGroundTruth: Bool {return self._groundTruth != nil}
  /// Clears the value of `groundTruth`. Subsequent reads from it will return its default value.
  public mutating func clearGroundTruth() {self._groundTruth = nil}

  /// The set we are evaluating
  public var searchToEval: Clarifai_Api_Search {
    get {return _searchToEval ?? Clarifai_Api_Search()}
    set {_searchToEval = newValue}
  }
  /// Returns true if `searchToEval` has been explicitly set.
  public var hasSearchToEval: Bool {return self._searchToEval != nil}
  /// Clears the value of `searchToEval`. Subsequent reads from it will return its default value.
  public mutating func clearSearchToEval() {self._searchToEval = nil}

  /// List of concepts to evaluate are expected to be in data.concepts
  public var data: Clarifai_Api_Data {
    get {return _data ?? Clarifai_Api_Data()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  /// The type of evaluation to use
  public var evaluationType: Clarifai_Api_EvaluationType = .classification

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _groundTruth: Clarifai_Api_Search? = nil
  fileprivate var _searchToEval: Clarifai_Api_Search? = nil
  fileprivate var _data: Clarifai_Api_Data? = nil
}

public struct Clarifai_Api_GetAnnotationSearchMetricsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// Unique custom facing id that identifies the eval to get
  public var id: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_ListAnnotationSearchMetricsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_MultiAnnotationSearchMetricsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Status of the request
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var annotationSearchMetrics: [Clarifai_Api_AnnotationSearchMetrics] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

public struct Clarifai_Api_PostValidatePasswordRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// password to be validated
  public var password: Clarifai_Api_Password {
    get {return _password ?? Clarifai_Api_Password()}
    set {_password = newValue}
  }
  /// Returns true if `password` has been explicitly set.
  public var hasPassword: Bool {return self._password != nil}
  /// Clears the value of `password`. Subsequent reads from it will return its default value.
  public mutating func clearPassword() {self._password = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _password: Clarifai_Api_Password? = nil
}

public struct Clarifai_Api_SinglePasswordValidationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Standard clarifai status code
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var passwordViolations: Clarifai_Api_PasswordViolations {
    get {return _passwordViolations ?? Clarifai_Api_PasswordViolations()}
    set {_passwordViolations = newValue}
  }
  /// Returns true if `passwordViolations` has been explicitly set.
  public var hasPasswordViolations: Bool {return self._passwordViolations != nil}
  /// Clears the value of `passwordViolations`. Subsequent reads from it will return its default value.
  public mutating func clearPasswordViolations() {self._passwordViolations = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _passwordViolations: Clarifai_Api_PasswordViolations? = nil
}

/////////////////////////////////////////////////////////////////////////////////
/// Requests / Responses from /proto/clarifai/api/workflow.proto
/////////////////////////////////////////////////////////////////////////////////
public struct Clarifai_Api_GetWorkflowRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// Workflow ID to retrieve
  /// If no ID is specified we return default workflow of the application
  /// If an ID is specified by default we first looks into Clarifai workflows for a Workflow ID
  public var workflowID: String = String()

  /// Use this flag to look into clarifai published workflows first for a Workflow ID
  public var favorClarifaiWorkflows: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_ListWorkflowsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
  /// Defaults to 1.
  public var page: UInt32 = 0

  /// (optional URL parameter) The number of results that will be contained in each page. Defaults
  /// to 10.
  public var perPage: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PostWorkflowsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var workflows: [Clarifai_Api_Workflow] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PatchWorkflowsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var workflows: [Clarifai_Api_Workflow] = []

  /// The action to perform on the patched objects
  /// For now actions 'merge', 'overwrite', and 'remove' are supported
  public var action: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_DeleteWorkflowRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var workflowID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Request to delete several things by the list of ids.
public struct Clarifai_Api_DeleteWorkflowsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var ids: [String] = []

  public var deleteAll: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_SingleWorkflowResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var workflow: Clarifai_Api_Workflow {
    get {return _workflow ?? Clarifai_Api_Workflow()}
    set {_workflow = newValue}
  }
  /// Returns true if `workflow` has been explicitly set.
  public var hasWorkflow: Bool {return self._workflow != nil}
  /// Clears the value of `workflow`. Subsequent reads from it will return its default value.
  public mutating func clearWorkflow() {self._workflow = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _workflow: Clarifai_Api_Workflow? = nil
}

public struct Clarifai_Api_MultiWorkflowResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var workflows: [Clarifai_Api_Workflow] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

public struct Clarifai_Api_PostWorkflowResultsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// Workflow ID to retrieve
  /// If no ID is specified we return default workflow of the application
  /// If an ID is specified by default we first looks into Clarifai workflows for a Workflow ID
  public var workflowID: String = String()

  public var inputs: [Clarifai_Api_Input] = []

  /// FIXME(zeiler): the request for post workflows is using an outputconfig object that is supposed
  /// to be within models. This is not consistent with setting this on the request for post model
  /// outputs where it is inside a model object. To make this consistent we would send in the
  /// workflow object so that each model can have it's own output config. If nobody is setting
  /// this OutputConfig it would probably be easier to just remove it for now to keep things simpler
  /// and then it's more consistent we just don't support the OutputConfig on workflows.
  public var outputConfig: Clarifai_Api_OutputConfig {
    get {return _outputConfig ?? Clarifai_Api_OutputConfig()}
    set {_outputConfig = newValue}
  }
  /// Returns true if `outputConfig` has been explicitly set.
  public var hasOutputConfig: Bool {return self._outputConfig != nil}
  /// Clears the value of `outputConfig`. Subsequent reads from it will return its default value.
  public mutating func clearOutputConfig() {self._outputConfig = nil}

  /// Use this flag to look into clarifai published workflows first for a Workflow ID
  public var favorClarifaiWorkflows: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
  fileprivate var _outputConfig: Clarifai_Api_OutputConfig? = nil
}

public struct Clarifai_Api_PostWorkflowResultsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var workflow: Clarifai_Api_Workflow {
    get {return _workflow ?? Clarifai_Api_Workflow()}
    set {_workflow = newValue}
  }
  /// Returns true if `workflow` has been explicitly set.
  public var hasWorkflow: Bool {return self._workflow != nil}
  /// Clears the value of `workflow`. Subsequent reads from it will return its default value.
  public mutating func clearWorkflow() {self._workflow = nil}

  public var results: [Clarifai_Api_WorkflowResult] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _workflow: Clarifai_Api_Workflow? = nil
}

public struct Clarifai_Api_PostWorkflowResultsSimilarityRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var workflowID: String = String()

  /// The specific model version whose outputs we are comparing
  public var modelVersionID: String = String()

  /// Each probe is compared against every pool input
  public var probeInputs: [Clarifai_Api_Input] = []

  /// Each pool input is compared against ever probe input
  public var poolInputs: [Clarifai_Api_Input] = []

  /// Use this flag to look into clarifai published workflows first for a Workflow ID
  public var favorClarifaiWorkflows: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PostWorkflowResultsSimilarityResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var results: [Clarifai_Api_WorkflowResultsSimilarity] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

///Request to start a app duplication process
public struct Clarifai_Api_PostAppDuplicationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var appDuplications: [Clarifai_Api_AppDuplication] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

///Request to check app duplication status
public struct Clarifai_Api_GetAppDuplicationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  ///The app duplication id
  public var appDuplicationID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

///Request to list all the app duplication that user triggered.
public struct Clarifai_Api_ListAppDuplicationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_MultiAppDuplicationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var appDuplications: [Clarifai_Api_AppDuplication] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

public struct Clarifai_Api_SingleAppDuplicationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var appDuplication: Clarifai_Api_AppDuplication {
    get {return _appDuplication ?? Clarifai_Api_AppDuplication()}
    set {_appDuplication = newValue}
  }
  /// Returns true if `appDuplication` has been explicitly set.
  public var hasAppDuplication: Bool {return self._appDuplication != nil}
  /// Clears the value of `appDuplication`. Subsequent reads from it will return its default value.
  public mutating func clearAppDuplication() {self._appDuplication = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _appDuplication: Clarifai_Api_AppDuplication? = nil
}

/// Request to create Tasks.
public struct Clarifai_Api_PostTasksRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var tasks: [Clarifai_Api_Task] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Request to get one task.
public struct Clarifai_Api_GetTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var taskID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Request to list multiple tasks.
public struct Clarifai_Api_ListTasksRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var page: UInt32 = 0

  public var perPage: UInt32 = 0

  /// Get tasks that have ANY user from this list assigned as worker.
  public var workerUserIds: [String] = []

  /// Get tasks that have ANY user from this list assigned as reviewer.
  public var reviewUserIds: [String] = []

  /// Get label order tasks as well
  public var includingLabelOrderTasks: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Request to patch a list of tasks.
public struct Clarifai_Api_PatchTasksRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var tasks: [Clarifai_Api_Task] = []

  /// The action to perform on the patched objects
  /// For now actions 'merge', 'overwrite', and 'remove' are supported
  public var action: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Request to delete a list of tasks.
public struct Clarifai_Api_DeleteTasksRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var ids: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Response with multiple Tasks.
public struct Clarifai_Api_MultiTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var tasks: [Clarifai_Api_Task] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

/// Response with a single Task.
public struct Clarifai_Api_SingleTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var task: Clarifai_Api_Task {
    get {return _task ?? Clarifai_Api_Task()}
    set {_task = newValue}
  }
  /// Returns true if `task` has been explicitly set.
  public var hasTask: Bool {return self._task != nil}
  /// Clears the value of `task`. Subsequent reads from it will return its default value.
  public mutating func clearTask() {self._task = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _task: Clarifai_Api_Task? = nil
}

/// Request to create Collectors.
public struct Clarifai_Api_PostCollectorsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var collectors: [Clarifai_Api_Collector] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_PatchCollectorsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var collectors: [Clarifai_Api_Collector] = []

  /// The action to perform on the patched objects
  /// For now actions 'merge', 'overwrite', and 'remove' are supported
  public var action: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Request to delete several things by the list of ids.
public struct Clarifai_Api_DeleteCollectorsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  public var ids: [String] = []

  public var deleteAll: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Request to GET a single Collector.
public struct Clarifai_Api_GetCollectorRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  ///The collecgtor id
  public var collectorID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Request to GET all the Collectors.
public struct Clarifai_Api_ListCollectorsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// (optional URL parameter) The page number. Pagination is used to split the results into chunks.
  /// Defaults to 1.
  public var page: UInt32 = 0

  /// (optional URL parameter) The number of results that will be contained in each page. Defaults
  /// to 10.
  public var perPage: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

/// Response with multiple Collectors.
public struct Clarifai_Api_MultiCollectorResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var collectors: [Clarifai_Api_Collector] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

/// Response with a single Collector.
public struct Clarifai_Api_SingleCollectorResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var collector: Clarifai_Api_Collector {
    get {return _collector ?? Clarifai_Api_Collector()}
    set {_collector = newValue}
  }
  /// Returns true if `collector` has been explicitly set.
  public var hasCollector: Bool {return self._collector != nil}
  /// Clears the value of `collector`. Subsequent reads from it will return its default value.
  public mutating func clearCollector() {self._collector = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
  fileprivate var _collector: Clarifai_Api_Collector? = nil
}

/////////////////////////////////////////////////////////////////////////////////
/// Stats Collection Endpoints.
/////////////////////////////////////////////////////////////////////////////////
public struct Clarifai_Api_PostStatValuesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The user and app information for the request.
  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// The stats to post, can post more than one at a time.
  public var statValues: [Clarifai_Api_StatValue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_MultiStatValueResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The response status.
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// The returned stats values.
  public var statValues: [Clarifai_Api_StatValue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

public struct Clarifai_Api_PostStatValuesAggregateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Ids present in the url of the request.
  public var userAppID: Clarifai_Api_UserAppIDSet {
    get {return _userAppID ?? Clarifai_Api_UserAppIDSet()}
    set {_userAppID = newValue}
  }
  /// Returns true if `userAppID` has been explicitly set.
  public var hasUserAppID: Bool {return self._userAppID != nil}
  /// Clears the value of `userAppID`. Subsequent reads from it will return its default value.
  public mutating func clearUserAppID() {self._userAppID = nil}

  /// Query to retrieve aggregate values.
  public var statValueAggregateQueries: [Clarifai_Api_StatValueAggregateQuery] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _userAppID: Clarifai_Api_UserAppIDSet? = nil
}

public struct Clarifai_Api_MultiStatValueAggregateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The response status.
  public var status: Clarifai_Api_Status_Status {
    get {return _status ?? Clarifai_Api_Status_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  /// The aggregate results for each query passedin.
  public var statValueAggregateResults: [Clarifai_Api_StatValueAggregateResult] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _status: Clarifai_Api_Status_Status? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "clarifai.api"

extension Clarifai_Api_Pagination: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Pagination"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "page"),
    2: .standard(proto: "per_page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 1)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_Pagination, rhs: Clarifai_Api_Pagination) -> Bool {
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetAnnotationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAnnotationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "annotation_id"),
    3: .standard(proto: "input_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.annotationID)
      case 3: try decoder.decodeSingularStringField(value: &self.inputID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.annotationID.isEmpty {
      try visitor.visitSingularStringField(value: self.annotationID, fieldNumber: 2)
    }
    if !self.inputID.isEmpty {
      try visitor.visitSingularStringField(value: self.inputID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetAnnotationRequest, rhs: Clarifai_Api_GetAnnotationRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.annotationID != rhs.annotationID {return false}
    if lhs.inputID != rhs.inputID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListAnnotationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAnnotationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "ids"),
    3: .standard(proto: "input_ids"),
    9: .standard(proto: "user_ids"),
    10: .standard(proto: "model_version_ids"),
    5: .same(proto: "statuses"),
    6: .standard(proto: "list_all_annotations"),
    7: .same(proto: "page"),
    8: .standard(proto: "per_page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.ids)
      case 3: try decoder.decodeRepeatedStringField(value: &self.inputIds)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.statuses)
      case 6: try decoder.decodeSingularBoolField(value: &self.listAllAnnotations)
      case 7: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 8: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      case 9: try decoder.decodeRepeatedStringField(value: &self.userIds)
      case 10: try decoder.decodeRepeatedStringField(value: &self.modelVersionIds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    if !self.inputIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.inputIds, fieldNumber: 3)
    }
    if !self.statuses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.statuses, fieldNumber: 5)
    }
    if self.listAllAnnotations != false {
      try visitor.visitSingularBoolField(value: self.listAllAnnotations, fieldNumber: 6)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 7)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 8)
    }
    if !self.userIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.userIds, fieldNumber: 9)
    }
    if !self.modelVersionIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.modelVersionIds, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListAnnotationsRequest, rhs: Clarifai_Api_ListAnnotationsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.inputIds != rhs.inputIds {return false}
    if lhs.userIds != rhs.userIds {return false}
    if lhs.modelVersionIds != rhs.modelVersionIds {return false}
    if lhs.statuses != rhs.statuses {return false}
    if lhs.listAllAnnotations != rhs.listAllAnnotations {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostAnnotationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostAnnotationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "annotations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.annotations)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.annotations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.annotations, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostAnnotationsRequest, rhs: Clarifai_Api_PostAnnotationsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.annotations != rhs.annotations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PatchAnnotationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchAnnotationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "annotations"),
    3: .same(proto: "action"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.annotations)
      case 3: try decoder.decodeSingularStringField(value: &self.action)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.annotations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.annotations, fieldNumber: 2)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PatchAnnotationsRequest, rhs: Clarifai_Api_PatchAnnotationsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.annotations != rhs.annotations {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteAnnotationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteAnnotationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "input_id"),
    3: .standard(proto: "annotation_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.inputID)
      case 3: try decoder.decodeSingularStringField(value: &self.annotationID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.inputID.isEmpty {
      try visitor.visitSingularStringField(value: self.inputID, fieldNumber: 2)
    }
    if !self.annotationID.isEmpty {
      try visitor.visitSingularStringField(value: self.annotationID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteAnnotationRequest, rhs: Clarifai_Api_DeleteAnnotationRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.inputID != rhs.inputID {return false}
    if lhs.annotationID != rhs.annotationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteAnnotationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteAnnotationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "ids"),
    3: .standard(proto: "input_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.ids)
      case 3: try decoder.decodeRepeatedStringField(value: &self.inputIds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    if !self.inputIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.inputIds, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteAnnotationsRequest, rhs: Clarifai_Api_DeleteAnnotationsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.inputIds != rhs.inputIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleAnnotationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleAnnotationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "annotation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._annotation)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._annotation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleAnnotationResponse, rhs: Clarifai_Api_SingleAnnotationResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._annotation != rhs._annotation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiAnnotationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiAnnotationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "annotations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.annotations)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.annotations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.annotations, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiAnnotationResponse, rhs: Clarifai_Api_MultiAnnotationResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.annotations != rhs.annotations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetAppRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAppRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetAppRequest, rhs: Clarifai_Api_GetAppRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListAppsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAppsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "per_page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListAppsRequest, rhs: Clarifai_Api_ListAppsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostAppsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostAppsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "apps"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.apps)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.apps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.apps, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostAppsRequest, rhs: Clarifai_Api_PostAppsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.apps != rhs.apps {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteAppRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteAppRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteAppRequest, rhs: Clarifai_Api_DeleteAppRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PatchAppsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchAppsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "apps"),
    3: .same(proto: "action"),
    4: .standard(proto: "metadata_action"),
    5: .same(proto: "reindex"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.apps)
      case 3: try decoder.decodeSingularStringField(value: &self.action)
      case 4: try decoder.decodeSingularMessageField(value: &self._metadataAction)
      case 5: try decoder.decodeSingularBoolField(value: &self.reindex)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.apps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.apps, fieldNumber: 2)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 3)
    }
    if let v = self._metadataAction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.reindex != false {
      try visitor.visitSingularBoolField(value: self.reindex, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PatchAppsRequest, rhs: Clarifai_Api_PatchAppsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.apps != rhs.apps {return false}
    if lhs.action != rhs.action {return false}
    if lhs._metadataAction != rhs._metadataAction {return false}
    if lhs.reindex != rhs.reindex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostAppsSearchesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostAppsSearchesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "app_query"),
    3: .same(proto: "pagination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularMessageField(value: &self._appQuery)
      case 3: try decoder.decodeSingularMessageField(value: &self._pagination)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._appQuery {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostAppsSearchesRequest, rhs: Clarifai_Api_PostAppsSearchesRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs._appQuery != rhs._appQuery {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleAppResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleAppResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "app"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._app)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._app {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleAppResponse, rhs: Clarifai_Api_SingleAppResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._app != rhs._app {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiAppResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiAppResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "apps"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.apps)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.apps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.apps, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiAppResponse, rhs: Clarifai_Api_MultiAppResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.apps != rhs.apps {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListCollaboratorsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListCollaboratorsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "list_all_collaborators"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularBoolField(value: &self.listAllCollaborators)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.listAllCollaborators != false {
      try visitor.visitSingularBoolField(value: self.listAllCollaborators, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListCollaboratorsRequest, rhs: Clarifai_Api_ListCollaboratorsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.listAllCollaborators != rhs.listAllCollaborators {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostCollaboratorsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostCollaboratorsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "collaborators"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.collaborators)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.collaborators.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collaborators, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostCollaboratorsRequest, rhs: Clarifai_Api_PostCollaboratorsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.collaborators != rhs.collaborators {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PatchCollaboratorsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchCollaboratorsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "collaborators"),
    3: .same(proto: "action"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.collaborators)
      case 3: try decoder.decodeSingularStringField(value: &self.action)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.collaborators.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collaborators, fieldNumber: 2)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PatchCollaboratorsRequest, rhs: Clarifai_Api_PatchCollaboratorsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.collaborators != rhs.collaborators {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteCollaboratorsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteCollaboratorsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "collaborator_ids"),
    3: .standard(proto: "user_emails"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.collaboratorIds)
      case 3: try decoder.decodeRepeatedStringField(value: &self.userEmails)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.collaboratorIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.collaboratorIds, fieldNumber: 2)
    }
    if !self.userEmails.isEmpty {
      try visitor.visitRepeatedStringField(value: self.userEmails, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteCollaboratorsRequest, rhs: Clarifai_Api_DeleteCollaboratorsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.collaboratorIds != rhs.collaboratorIds {return false}
    if lhs.userEmails != rhs.userEmails {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiCollaboratorsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiCollaboratorsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "collaborators"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.collaborators)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.collaborators.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collaborators, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiCollaboratorsResponse, rhs: Clarifai_Api_MultiCollaboratorsResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.collaborators != rhs.collaborators {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListCollaborationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListCollaborationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "per_page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListCollaborationsRequest, rhs: Clarifai_Api_ListCollaborationsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiCollaborationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiCollaborationsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "collaborations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.collaborations)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.collaborations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collaborations, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiCollaborationsResponse, rhs: Clarifai_Api_MultiCollaborationsResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.collaborations != rhs.collaborations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetStatusCodeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStatusCodeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "status_code_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.statusCodeID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.statusCodeID.isEmpty {
      try visitor.visitSingularStringField(value: self.statusCodeID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetStatusCodeRequest, rhs: Clarifai_Api_GetStatusCodeRequest) -> Bool {
    if lhs.statusCodeID != rhs.statusCodeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListStatusCodesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListStatusCodesRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListStatusCodesRequest, rhs: Clarifai_Api_ListStatusCodesRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleStatusCodeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleStatusCodeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleStatusCodeResponse, rhs: Clarifai_Api_SingleStatusCodeResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiStatusCodeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiStatusCodeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "statuses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.statuses)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.statuses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.statuses, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiStatusCodeResponse, rhs: Clarifai_Api_MultiStatusCodeResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.statuses != rhs.statuses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetConceptRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetConceptRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "concept_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.conceptID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.conceptID.isEmpty {
      try visitor.visitSingularStringField(value: self.conceptID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetConceptRequest, rhs: Clarifai_Api_GetConceptRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.conceptID != rhs.conceptID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListConceptsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListConceptsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "per_page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListConceptsRequest, rhs: Clarifai_Api_ListConceptsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostConceptsSearchesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostConceptsSearchesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "concept_query"),
    3: .same(proto: "pagination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularMessageField(value: &self._conceptQuery)
      case 3: try decoder.decodeSingularMessageField(value: &self._pagination)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._conceptQuery {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostConceptsSearchesRequest, rhs: Clarifai_Api_PostConceptsSearchesRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs._conceptQuery != rhs._conceptQuery {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostConceptsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostConceptsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "concepts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.concepts)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.concepts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.concepts, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostConceptsRequest, rhs: Clarifai_Api_PostConceptsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.concepts != rhs.concepts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PatchConceptsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchConceptsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "concepts"),
    3: .same(proto: "action"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.concepts)
      case 3: try decoder.decodeSingularStringField(value: &self.action)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.concepts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.concepts, fieldNumber: 2)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PatchConceptsRequest, rhs: Clarifai_Api_PatchConceptsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.concepts != rhs.concepts {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetConceptCountsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetConceptCountsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "per_page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetConceptCountsRequest, rhs: Clarifai_Api_GetConceptCountsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleConceptResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleConceptResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "concept"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._concept)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._concept {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleConceptResponse, rhs: Clarifai_Api_SingleConceptResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._concept != rhs._concept {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiConceptResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiConceptResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "concepts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.concepts)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.concepts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.concepts, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiConceptResponse, rhs: Clarifai_Api_MultiConceptResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.concepts != rhs.concepts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiConceptCountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiConceptCountResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "concept_counts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.conceptCounts)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.conceptCounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.conceptCounts, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiConceptCountResponse, rhs: Clarifai_Api_MultiConceptCountResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.conceptCounts != rhs.conceptCounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListConceptRelationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListConceptRelationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "concept_id"),
    3: .same(proto: "predicate"),
    4: .standard(proto: "knowledge_graph_id"),
    5: .same(proto: "page"),
    6: .standard(proto: "per_page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.conceptID)
      case 3: try decoder.decodeSingularStringField(value: &self.predicate)
      case 4: try decoder.decodeSingularStringField(value: &self.knowledgeGraphID)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 6: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.conceptID.isEmpty {
      try visitor.visitSingularStringField(value: self.conceptID, fieldNumber: 2)
    }
    if !self.predicate.isEmpty {
      try visitor.visitSingularStringField(value: self.predicate, fieldNumber: 3)
    }
    if !self.knowledgeGraphID.isEmpty {
      try visitor.visitSingularStringField(value: self.knowledgeGraphID, fieldNumber: 4)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 5)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListConceptRelationsRequest, rhs: Clarifai_Api_ListConceptRelationsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.conceptID != rhs.conceptID {return false}
    if lhs.predicate != rhs.predicate {return false}
    if lhs.knowledgeGraphID != rhs.knowledgeGraphID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostConceptRelationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostConceptRelationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "concept_id"),
    3: .standard(proto: "concept_relations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.conceptID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.conceptRelations)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.conceptID.isEmpty {
      try visitor.visitSingularStringField(value: self.conceptID, fieldNumber: 2)
    }
    if !self.conceptRelations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.conceptRelations, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostConceptRelationsRequest, rhs: Clarifai_Api_PostConceptRelationsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.conceptID != rhs.conceptID {return false}
    if lhs.conceptRelations != rhs.conceptRelations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteConceptRelationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteConceptRelationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "concept_id"),
    3: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.conceptID)
      case 3: try decoder.decodeRepeatedStringField(value: &self.ids)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.conceptID.isEmpty {
      try visitor.visitSingularStringField(value: self.conceptID, fieldNumber: 2)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteConceptRelationsRequest, rhs: Clarifai_Api_DeleteConceptRelationsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.conceptID != rhs.conceptID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListKnowledgeGraphsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListKnowledgeGraphsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListKnowledgeGraphsRequest, rhs: Clarifai_Api_ListKnowledgeGraphsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostKnowledgeGraphsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostKnowledgeGraphsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "knowledge_graphs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.knowledgeGraphs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.knowledgeGraphs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.knowledgeGraphs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostKnowledgeGraphsRequest, rhs: Clarifai_Api_PostKnowledgeGraphsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.knowledgeGraphs != rhs.knowledgeGraphs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostConceptMappingJobsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostConceptMappingJobsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "concept_mapping_jobs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.conceptMappingJobs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.conceptMappingJobs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.conceptMappingJobs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostConceptMappingJobsRequest, rhs: Clarifai_Api_PostConceptMappingJobsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.conceptMappingJobs != rhs.conceptMappingJobs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiConceptRelationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiConceptRelationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "concept_relations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.conceptRelations)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.conceptRelations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.conceptRelations, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiConceptRelationResponse, rhs: Clarifai_Api_MultiConceptRelationResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.conceptRelations != rhs.conceptRelations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiKnowledgeGraphResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiKnowledgeGraphResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "knowledge_graphs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.knowledgeGraphs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.knowledgeGraphs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.knowledgeGraphs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiKnowledgeGraphResponse, rhs: Clarifai_Api_MultiKnowledgeGraphResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.knowledgeGraphs != rhs.knowledgeGraphs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiConceptMappingJobResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiConceptMappingJobResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedStringField(value: &self.ids)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiConceptMappingJobResponse, rhs: Clarifai_Api_MultiConceptMappingJobResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetConceptLanguageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetConceptLanguageRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "concept_id"),
    3: .same(proto: "language"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.conceptID)
      case 3: try decoder.decodeSingularStringField(value: &self.language)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.conceptID.isEmpty {
      try visitor.visitSingularStringField(value: self.conceptID, fieldNumber: 2)
    }
    if !self.language.isEmpty {
      try visitor.visitSingularStringField(value: self.language, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetConceptLanguageRequest, rhs: Clarifai_Api_GetConceptLanguageRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.conceptID != rhs.conceptID {return false}
    if lhs.language != rhs.language {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListConceptLanguagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListConceptLanguagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "concept_id"),
    3: .same(proto: "page"),
    4: .standard(proto: "per_page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.conceptID)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.conceptID.isEmpty {
      try visitor.visitSingularStringField(value: self.conceptID, fieldNumber: 2)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 3)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListConceptLanguagesRequest, rhs: Clarifai_Api_ListConceptLanguagesRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.conceptID != rhs.conceptID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PatchConceptLanguagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchConceptLanguagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "concept_id"),
    3: .standard(proto: "concept_languages"),
    4: .same(proto: "action"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.conceptID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.conceptLanguages)
      case 4: try decoder.decodeSingularStringField(value: &self.action)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.conceptID.isEmpty {
      try visitor.visitSingularStringField(value: self.conceptID, fieldNumber: 2)
    }
    if !self.conceptLanguages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.conceptLanguages, fieldNumber: 3)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PatchConceptLanguagesRequest, rhs: Clarifai_Api_PatchConceptLanguagesRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.conceptID != rhs.conceptID {return false}
    if lhs.conceptLanguages != rhs.conceptLanguages {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostConceptLanguagesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostConceptLanguagesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "concept_id"),
    3: .standard(proto: "concept_languages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.conceptID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.conceptLanguages)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.conceptID.isEmpty {
      try visitor.visitSingularStringField(value: self.conceptID, fieldNumber: 2)
    }
    if !self.conceptLanguages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.conceptLanguages, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostConceptLanguagesRequest, rhs: Clarifai_Api_PostConceptLanguagesRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.conceptID != rhs.conceptID {return false}
    if lhs.conceptLanguages != rhs.conceptLanguages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleConceptLanguageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleConceptLanguageResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "concept_language"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._conceptLanguage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._conceptLanguage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleConceptLanguageResponse, rhs: Clarifai_Api_SingleConceptLanguageResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._conceptLanguage != rhs._conceptLanguage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiConceptLanguageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiConceptLanguageResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "concept_languages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.conceptLanguages)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.conceptLanguages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.conceptLanguages, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiConceptLanguageResponse, rhs: Clarifai_Api_MultiConceptLanguageResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.conceptLanguages != rhs.conceptLanguages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetInputRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetInputRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "input_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.inputID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.inputID.isEmpty {
      try visitor.visitSingularStringField(value: self.inputID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetInputRequest, rhs: Clarifai_Api_GetInputRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.inputID != rhs.inputID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListInputsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListInputsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "per_page"),
    5: .same(proto: "status"),
    4: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      case 4: try decoder.decodeRepeatedStringField(value: &self.ids)
      case 5: try decoder.decodeSingularMessageField(value: &self._status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 3)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 4)
    }
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListInputsRequest, rhs: Clarifai_Api_ListInputsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs._status != rhs._status {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_StreamInputsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamInputsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "per_page"),
    3: .standard(proto: "last_id"),
    4: .same(proto: "descending"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      case 3: try decoder.decodeSingularStringField(value: &self.lastID)
      case 4: try decoder.decodeSingularBoolField(value: &self.descending)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 2)
    }
    if !self.lastID.isEmpty {
      try visitor.visitSingularStringField(value: self.lastID, fieldNumber: 3)
    }
    if self.descending != false {
      try visitor.visitSingularBoolField(value: self.descending, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_StreamInputsRequest, rhs: Clarifai_Api_StreamInputsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.lastID != rhs.lastID {return false}
    if lhs.descending != rhs.descending {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostInputsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostInputsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "inputs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.inputs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostInputsRequest, rhs: Clarifai_Api_PostInputsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PatchInputsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchInputsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "inputs"),
    3: .same(proto: "action"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.inputs)
      case 3: try decoder.decodeSingularStringField(value: &self.action)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 2)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PatchInputsRequest, rhs: Clarifai_Api_PatchInputsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteInputRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteInputRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "input_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.inputID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.inputID.isEmpty {
      try visitor.visitSingularStringField(value: self.inputID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteInputRequest, rhs: Clarifai_Api_DeleteInputRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.inputID != rhs.inputID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteInputsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteInputsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "ids"),
    3: .standard(proto: "delete_all"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.ids)
      case 3: try decoder.decodeSingularBoolField(value: &self.deleteAll)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    if self.deleteAll != false {
      try visitor.visitSingularBoolField(value: self.deleteAll, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteInputsRequest, rhs: Clarifai_Api_DeleteInputsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.deleteAll != rhs.deleteAll {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleInputResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleInputResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "input"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._input)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._input {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleInputResponse, rhs: Clarifai_Api_SingleInputResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._input != rhs._input {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiInputResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiInputResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "inputs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.inputs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiInputResponse, rhs: Clarifai_Api_MultiInputResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleInputCountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleInputCountResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "counts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._counts)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._counts {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleInputCountResponse, rhs: Clarifai_Api_SingleInputCountResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._counts != rhs._counts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetInputCountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetInputCountRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetInputCountRequest, rhs: Clarifai_Api_GetInputCountRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostModelOutputsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostModelOutputsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "model_id"),
    3: .standard(proto: "version_id"),
    4: .same(proto: "inputs"),
    5: .same(proto: "model"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.modelID)
      case 3: try decoder.decodeSingularStringField(value: &self.versionID)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.inputs)
      case 5: try decoder.decodeSingularMessageField(value: &self._model)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.modelID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelID, fieldNumber: 2)
    }
    if !self.versionID.isEmpty {
      try visitor.visitSingularStringField(value: self.versionID, fieldNumber: 3)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 4)
    }
    if let v = self._model {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostModelOutputsRequest, rhs: Clarifai_Api_PostModelOutputsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.modelID != rhs.modelID {return false}
    if lhs.versionID != rhs.versionID {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs._model != rhs._model {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListModelInputsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListModelInputsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "model_id"),
    3: .standard(proto: "version_id"),
    4: .same(proto: "page"),
    5: .standard(proto: "per_page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.modelID)
      case 3: try decoder.decodeSingularStringField(value: &self.versionID)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.modelID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelID, fieldNumber: 2)
    }
    if !self.versionID.isEmpty {
      try visitor.visitSingularStringField(value: self.versionID, fieldNumber: 3)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 4)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListModelInputsRequest, rhs: Clarifai_Api_ListModelInputsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.modelID != rhs.modelID {return false}
    if lhs.versionID != rhs.versionID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetKeyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "key_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.keyID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetKeyRequest, rhs: Clarifai_Api_GetKeyRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.keyID != rhs.keyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListKeysRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListKeysRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "per_page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListKeysRequest, rhs: Clarifai_Api_ListKeysRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListAppKeysRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAppKeysRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "per_page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListAppKeysRequest, rhs: Clarifai_Api_ListAppKeysRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostKeysRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostKeysRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "keys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.keys)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.keys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostKeysRequest, rhs: Clarifai_Api_PostKeysRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.keys != rhs.keys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteKeyRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "key_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.keyID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteKeyRequest, rhs: Clarifai_Api_DeleteKeyRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.keyID != rhs.keyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PatchKeysRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchKeysRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "keys"),
    3: .same(proto: "action"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.keys)
      case 3: try decoder.decodeSingularStringField(value: &self.action)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.keys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keys, fieldNumber: 2)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PatchKeysRequest, rhs: Clarifai_Api_PatchKeysRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.keys != rhs.keys {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleKeyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleKeyResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._key)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._key {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleKeyResponse, rhs: Clarifai_Api_SingleKeyResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._key != rhs._key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiKeyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiKeyResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "keys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.keys)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.keys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiKeyResponse, rhs: Clarifai_Api_MultiKeyResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.keys != rhs.keys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetModelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetModelRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "model_id"),
    3: .standard(proto: "version_id"),
    4: .same(proto: "language"),
    5: .standard(proto: "trained_before"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.modelID)
      case 3: try decoder.decodeSingularStringField(value: &self.versionID)
      case 4: try decoder.decodeSingularStringField(value: &self.language)
      case 5: try decoder.decodeSingularBoolField(value: &self.trainedBefore)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.modelID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelID, fieldNumber: 2)
    }
    if !self.versionID.isEmpty {
      try visitor.visitSingularStringField(value: self.versionID, fieldNumber: 3)
    }
    if !self.language.isEmpty {
      try visitor.visitSingularStringField(value: self.language, fieldNumber: 4)
    }
    if self.trainedBefore != false {
      try visitor.visitSingularBoolField(value: self.trainedBefore, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetModelRequest, rhs: Clarifai_Api_GetModelRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.modelID != rhs.modelID {return false}
    if lhs.versionID != rhs.versionID {return false}
    if lhs.language != rhs.language {return false}
    if lhs.trainedBefore != rhs.trainedBefore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListModelsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListModelsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "per_page"),
    4: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      case 4: try decoder.decodeRepeatedStringField(value: &self.ids)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 3)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListModelsRequest, rhs: Clarifai_Api_ListModelsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostModelsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostModelsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "model"),
    3: .same(proto: "models"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularMessageField(value: &self._model)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.models)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._model {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.models.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.models, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostModelsRequest, rhs: Clarifai_Api_PostModelsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs._model != rhs._model {return false}
    if lhs.models != rhs.models {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PatchModelsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchModelsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "models"),
    3: .same(proto: "action"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.models)
      case 3: try decoder.decodeSingularStringField(value: &self.action)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.models.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.models, fieldNumber: 2)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PatchModelsRequest, rhs: Clarifai_Api_PatchModelsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.models != rhs.models {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteModelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteModelRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "model_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.modelID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.modelID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteModelRequest, rhs: Clarifai_Api_DeleteModelRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.modelID != rhs.modelID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteModelsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteModelsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "ids"),
    3: .standard(proto: "delete_all"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.ids)
      case 3: try decoder.decodeSingularBoolField(value: &self.deleteAll)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    if self.deleteAll != false {
      try visitor.visitSingularBoolField(value: self.deleteAll, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteModelsRequest, rhs: Clarifai_Api_DeleteModelsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.deleteAll != rhs.deleteAll {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostModelsSearchesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostModelsSearchesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "model_query"),
    3: .same(proto: "pagination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularMessageField(value: &self._modelQuery)
      case 3: try decoder.decodeSingularMessageField(value: &self._pagination)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._modelQuery {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostModelsSearchesRequest, rhs: Clarifai_Api_PostModelsSearchesRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs._modelQuery != rhs._modelQuery {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleModelResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleModelResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "model"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._model)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._model {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleModelResponse, rhs: Clarifai_Api_SingleModelResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._model != rhs._model {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiModelResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiModelResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "models"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.models)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.models.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.models, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiModelResponse, rhs: Clarifai_Api_MultiModelResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.models != rhs.models {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetModelVersionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetModelVersionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "model_id"),
    3: .standard(proto: "version_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.modelID)
      case 3: try decoder.decodeSingularStringField(value: &self.versionID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.modelID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelID, fieldNumber: 2)
    }
    if !self.versionID.isEmpty {
      try visitor.visitSingularStringField(value: self.versionID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetModelVersionRequest, rhs: Clarifai_Api_GetModelVersionRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.modelID != rhs.modelID {return false}
    if lhs.versionID != rhs.versionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListModelVersionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListModelVersionsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "model_id"),
    3: .same(proto: "page"),
    4: .standard(proto: "per_page"),
    5: .standard(proto: "concept_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.modelID)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      case 5: try decoder.decodeRepeatedStringField(value: &self.conceptIds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.modelID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelID, fieldNumber: 2)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 3)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 4)
    }
    if !self.conceptIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.conceptIds, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListModelVersionsRequest, rhs: Clarifai_Api_ListModelVersionsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.modelID != rhs.modelID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.conceptIds != rhs.conceptIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteModelVersionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteModelVersionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    3: .standard(proto: "model_id"),
    4: .standard(proto: "version_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 3: try decoder.decodeSingularStringField(value: &self.modelID)
      case 4: try decoder.decodeSingularStringField(value: &self.versionID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.modelID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelID, fieldNumber: 3)
    }
    if !self.versionID.isEmpty {
      try visitor.visitSingularStringField(value: self.versionID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteModelVersionRequest, rhs: Clarifai_Api_DeleteModelVersionRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.modelID != rhs.modelID {return false}
    if lhs.versionID != rhs.versionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleModelVersionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleModelVersionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "model_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._modelVersion)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._modelVersion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleModelVersionResponse, rhs: Clarifai_Api_SingleModelVersionResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._modelVersion != rhs._modelVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiModelVersionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiModelVersionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "model_versions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.modelVersions)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.modelVersions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.modelVersions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiModelVersionResponse, rhs: Clarifai_Api_MultiModelVersionResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.modelVersions != rhs.modelVersions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostModelVersionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostModelVersionsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "model_id"),
    3: .standard(proto: "model_versions"),
    4: .same(proto: "search"),
    5: .standard(proto: "train_search"),
    6: .standard(proto: "test_search"),
    7: .standard(proto: "evaluate_after_training"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.modelID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.modelVersions)
      case 4: try decoder.decodeSingularMessageField(value: &self._search)
      case 5: try decoder.decodeSingularMessageField(value: &self._trainSearch)
      case 6: try decoder.decodeSingularMessageField(value: &self._testSearch)
      case 7: try decoder.decodeSingularBoolField(value: &self.evaluateAfterTraining)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.modelID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelID, fieldNumber: 2)
    }
    if !self.modelVersions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.modelVersions, fieldNumber: 3)
    }
    if let v = self._search {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._trainSearch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._testSearch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if self.evaluateAfterTraining != false {
      try visitor.visitSingularBoolField(value: self.evaluateAfterTraining, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostModelVersionsRequest, rhs: Clarifai_Api_PostModelVersionsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.modelID != rhs.modelID {return false}
    if lhs.modelVersions != rhs.modelVersions {return false}
    if lhs._search != rhs._search {return false}
    if lhs._trainSearch != rhs._trainSearch {return false}
    if lhs._testSearch != rhs._testSearch {return false}
    if lhs.evaluateAfterTraining != rhs.evaluateAfterTraining {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostModelVersionMetricsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostModelVersionMetricsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "model_id"),
    3: .standard(proto: "version_id"),
    4: .standard(proto: "max_examples"),
    5: .standard(proto: "test_search"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.modelID)
      case 3: try decoder.decodeSingularStringField(value: &self.versionID)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.maxExamples)
      case 5: try decoder.decodeSingularMessageField(value: &self._testSearch)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.modelID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelID, fieldNumber: 2)
    }
    if !self.versionID.isEmpty {
      try visitor.visitSingularStringField(value: self.versionID, fieldNumber: 3)
    }
    if self.maxExamples != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxExamples, fieldNumber: 4)
    }
    if let v = self._testSearch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostModelVersionMetricsRequest, rhs: Clarifai_Api_PostModelVersionMetricsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.modelID != rhs.modelID {return false}
    if lhs.versionID != rhs.versionID {return false}
    if lhs.maxExamples != rhs.maxExamples {return false}
    if lhs._testSearch != rhs._testSearch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetModelVersionMetricsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetModelVersionMetricsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "model_id"),
    3: .standard(proto: "version_id"),
    4: .same(proto: "fields"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.modelID)
      case 3: try decoder.decodeSingularStringField(value: &self.versionID)
      case 4: try decoder.decodeSingularMessageField(value: &self._fields)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.modelID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelID, fieldNumber: 2)
    }
    if !self.versionID.isEmpty {
      try visitor.visitSingularStringField(value: self.versionID, fieldNumber: 3)
    }
    if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetModelVersionMetricsRequest, rhs: Clarifai_Api_GetModelVersionMetricsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.modelID != rhs.modelID {return false}
    if lhs.versionID != rhs.versionID {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetModelTypeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetModelTypeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "model_type_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.modelTypeID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.modelTypeID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelTypeID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetModelTypeRequest, rhs: Clarifai_Api_GetModelTypeRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.modelTypeID != rhs.modelTypeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListModelTypesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListModelTypesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "per_page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListModelTypesRequest, rhs: Clarifai_Api_ListModelTypesRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleModelTypeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleModelTypeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "model_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._modelType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._modelType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleModelTypeResponse, rhs: Clarifai_Api_SingleModelTypeResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._modelType != rhs._modelType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiModelTypeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiModelTypeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "model_types"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.modelTypes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.modelTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.modelTypes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiModelTypeResponse, rhs: Clarifai_Api_MultiModelTypeResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.modelTypes != rhs.modelTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiOutputResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiOutputResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "outputs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.outputs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiOutputResponse, rhs: Clarifai_Api_MultiOutputResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListScopesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListScopesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.keyType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyType.isEmpty {
      try visitor.visitSingularStringField(value: self.keyType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListScopesRequest, rhs: Clarifai_Api_ListScopesRequest) -> Bool {
    if lhs.keyType != rhs.keyType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MyScopesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MyScopesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MyScopesRequest, rhs: Clarifai_Api_MyScopesRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiScopeDepsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiScopeDepsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "scope_deps"),
    3: .standard(proto: "endpoint_deps"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.scopeDeps)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.endpointDeps)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.scopeDeps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.scopeDeps, fieldNumber: 2)
    }
    if !self.endpointDeps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.endpointDeps, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiScopeDepsResponse, rhs: Clarifai_Api_MultiScopeDepsResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.scopeDeps != rhs.scopeDeps {return false}
    if lhs.endpointDeps != rhs.endpointDeps {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiScopeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiScopeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "scopes"),
    3: .same(proto: "app"),
    4: .same(proto: "endpoints"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedStringField(value: &self.scopes)
      case 3: try decoder.decodeSingularMessageField(value: &self._app)
      case 4: try decoder.decodeRepeatedStringField(value: &self.endpoints)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.scopes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.scopes, fieldNumber: 2)
    }
    if let v = self._app {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.endpoints.isEmpty {
      try visitor.visitRepeatedStringField(value: self.endpoints, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiScopeResponse, rhs: Clarifai_Api_MultiScopeResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.scopes != rhs.scopes {return false}
    if lhs._app != rhs._app {return false}
    if lhs.endpoints != rhs.endpoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetSearchRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetSearchRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetSearchRequest, rhs: Clarifai_Api_GetSearchRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListSearchesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListSearchesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "per_page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListSearchesRequest, rhs: Clarifai_Api_ListSearchesRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostSearchesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostSearchesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "query"),
    3: .same(proto: "searches"),
    4: .same(proto: "pagination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularMessageField(value: &self._query)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.searches)
      case 4: try decoder.decodeSingularMessageField(value: &self._pagination)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._query {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.searches.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.searches, fieldNumber: 3)
    }
    if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostSearchesRequest, rhs: Clarifai_Api_PostSearchesRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs._query != rhs._query {return false}
    if lhs.searches != rhs.searches {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostSearchesByIDRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostSearchesByIDRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "id"),
    3: .same(proto: "pagination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularMessageField(value: &self._pagination)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostSearchesByIDRequest, rhs: Clarifai_Api_PostSearchesByIDRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.id != rhs.id {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteSearchRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteSearchRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteSearchRequest, rhs: Clarifai_Api_DeleteSearchRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostAnnotationsSearchesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostAnnotationsSearchesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "searches"),
    3: .same(proto: "pagination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.searches)
      case 3: try decoder.decodeSingularMessageField(value: &self._pagination)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.searches.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.searches, fieldNumber: 2)
    }
    if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostAnnotationsSearchesRequest, rhs: Clarifai_Api_PostAnnotationsSearchesRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.searches != rhs.searches {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteAnnotationSearchMetricsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteAnnotationSearchMetricsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteAnnotationSearchMetricsRequest, rhs: Clarifai_Api_DeleteAnnotationSearchMetricsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostInputsSearchesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostInputsSearchesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "searches"),
    3: .same(proto: "pagination"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.searches)
      case 3: try decoder.decodeSingularMessageField(value: &self._pagination)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.searches.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.searches, fieldNumber: 2)
    }
    if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostInputsSearchesRequest, rhs: Clarifai_Api_PostInputsSearchesRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.searches != rhs.searches {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleSearchResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleSearchResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    5: .same(proto: "search"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 5: try decoder.decodeSingularMessageField(value: &self._search)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._search {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleSearchResponse, rhs: Clarifai_Api_SingleSearchResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._search != rhs._search {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiSearchResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiSearchResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "id"),
    3: .same(proto: "hits"),
    4: .same(proto: "query"),
    5: .same(proto: "searches"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.hits)
      case 4: try decoder.decodeSingularMessageField(value: &self._query)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.searches)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.hits.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hits, fieldNumber: 3)
    }
    if let v = self._query {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.searches.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.searches, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiSearchResponse, rhs: Clarifai_Api_MultiSearchResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.id != rhs.id {return false}
    if lhs.hits != rhs.hits {return false}
    if lhs._query != rhs._query {return false}
    if lhs.searches != rhs.searches {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostAnnotationSearchMetricsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostAnnotationSearchMetricsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "id"),
    3: .standard(proto: "ground_truth"),
    4: .standard(proto: "search_to_eval"),
    5: .same(proto: "data"),
    6: .standard(proto: "evaluation_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      case 3: try decoder.decodeSingularMessageField(value: &self._groundTruth)
      case 4: try decoder.decodeSingularMessageField(value: &self._searchToEval)
      case 5: try decoder.decodeSingularMessageField(value: &self._data)
      case 6: try decoder.decodeSingularEnumField(value: &self.evaluationType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if let v = self._groundTruth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._searchToEval {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.evaluationType != .classification {
      try visitor.visitSingularEnumField(value: self.evaluationType, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostAnnotationSearchMetricsRequest, rhs: Clarifai_Api_PostAnnotationSearchMetricsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.id != rhs.id {return false}
    if lhs._groundTruth != rhs._groundTruth {return false}
    if lhs._searchToEval != rhs._searchToEval {return false}
    if lhs._data != rhs._data {return false}
    if lhs.evaluationType != rhs.evaluationType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetAnnotationSearchMetricsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAnnotationSearchMetricsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetAnnotationSearchMetricsRequest, rhs: Clarifai_Api_GetAnnotationSearchMetricsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListAnnotationSearchMetricsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAnnotationSearchMetricsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListAnnotationSearchMetricsRequest, rhs: Clarifai_Api_ListAnnotationSearchMetricsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiAnnotationSearchMetricsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiAnnotationSearchMetricsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "annotation_search_metrics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.annotationSearchMetrics)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.annotationSearchMetrics.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.annotationSearchMetrics, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiAnnotationSearchMetricsResponse, rhs: Clarifai_Api_MultiAnnotationSearchMetricsResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.annotationSearchMetrics != rhs.annotationSearchMetrics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostValidatePasswordRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostValidatePasswordRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "password"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularMessageField(value: &self._password)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._password {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostValidatePasswordRequest, rhs: Clarifai_Api_PostValidatePasswordRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs._password != rhs._password {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SinglePasswordValidationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SinglePasswordValidationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "password_violations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._passwordViolations)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._passwordViolations {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SinglePasswordValidationResponse, rhs: Clarifai_Api_SinglePasswordValidationResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._passwordViolations != rhs._passwordViolations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetWorkflowRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetWorkflowRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "workflow_id"),
    3: .standard(proto: "favor_clarifai_workflows"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.workflowID)
      case 3: try decoder.decodeSingularBoolField(value: &self.favorClarifaiWorkflows)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.workflowID.isEmpty {
      try visitor.visitSingularStringField(value: self.workflowID, fieldNumber: 2)
    }
    if self.favorClarifaiWorkflows != false {
      try visitor.visitSingularBoolField(value: self.favorClarifaiWorkflows, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetWorkflowRequest, rhs: Clarifai_Api_GetWorkflowRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.workflowID != rhs.workflowID {return false}
    if lhs.favorClarifaiWorkflows != rhs.favorClarifaiWorkflows {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListWorkflowsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListWorkflowsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "per_page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListWorkflowsRequest, rhs: Clarifai_Api_ListWorkflowsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostWorkflowsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostWorkflowsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "workflows"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.workflows)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.workflows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.workflows, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostWorkflowsRequest, rhs: Clarifai_Api_PostWorkflowsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.workflows != rhs.workflows {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PatchWorkflowsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchWorkflowsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "workflows"),
    3: .same(proto: "action"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.workflows)
      case 3: try decoder.decodeSingularStringField(value: &self.action)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.workflows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.workflows, fieldNumber: 2)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PatchWorkflowsRequest, rhs: Clarifai_Api_PatchWorkflowsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.workflows != rhs.workflows {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteWorkflowRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteWorkflowRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "workflow_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.workflowID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.workflowID.isEmpty {
      try visitor.visitSingularStringField(value: self.workflowID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteWorkflowRequest, rhs: Clarifai_Api_DeleteWorkflowRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.workflowID != rhs.workflowID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteWorkflowsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteWorkflowsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "ids"),
    3: .standard(proto: "delete_all"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.ids)
      case 3: try decoder.decodeSingularBoolField(value: &self.deleteAll)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    if self.deleteAll != false {
      try visitor.visitSingularBoolField(value: self.deleteAll, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteWorkflowsRequest, rhs: Clarifai_Api_DeleteWorkflowsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.deleteAll != rhs.deleteAll {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleWorkflowResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleWorkflowResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "workflow"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._workflow)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._workflow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleWorkflowResponse, rhs: Clarifai_Api_SingleWorkflowResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._workflow != rhs._workflow {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiWorkflowResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiWorkflowResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "workflows"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.workflows)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.workflows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.workflows, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiWorkflowResponse, rhs: Clarifai_Api_MultiWorkflowResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.workflows != rhs.workflows {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostWorkflowResultsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostWorkflowResultsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "workflow_id"),
    3: .same(proto: "inputs"),
    4: .standard(proto: "output_config"),
    5: .standard(proto: "favor_clarifai_workflows"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.workflowID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.inputs)
      case 4: try decoder.decodeSingularMessageField(value: &self._outputConfig)
      case 5: try decoder.decodeSingularBoolField(value: &self.favorClarifaiWorkflows)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.workflowID.isEmpty {
      try visitor.visitSingularStringField(value: self.workflowID, fieldNumber: 2)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 3)
    }
    if let v = self._outputConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.favorClarifaiWorkflows != false {
      try visitor.visitSingularBoolField(value: self.favorClarifaiWorkflows, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostWorkflowResultsRequest, rhs: Clarifai_Api_PostWorkflowResultsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.workflowID != rhs.workflowID {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs._outputConfig != rhs._outputConfig {return false}
    if lhs.favorClarifaiWorkflows != rhs.favorClarifaiWorkflows {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostWorkflowResultsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostWorkflowResultsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "workflow"),
    3: .same(proto: "results"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._workflow)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.results)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._workflow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostWorkflowResultsResponse, rhs: Clarifai_Api_PostWorkflowResultsResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._workflow != rhs._workflow {return false}
    if lhs.results != rhs.results {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostWorkflowResultsSimilarityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostWorkflowResultsSimilarityRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "workflow_id"),
    3: .standard(proto: "model_version_id"),
    4: .standard(proto: "probe_inputs"),
    5: .standard(proto: "pool_inputs"),
    6: .standard(proto: "favor_clarifai_workflows"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.workflowID)
      case 3: try decoder.decodeSingularStringField(value: &self.modelVersionID)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.probeInputs)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.poolInputs)
      case 6: try decoder.decodeSingularBoolField(value: &self.favorClarifaiWorkflows)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.workflowID.isEmpty {
      try visitor.visitSingularStringField(value: self.workflowID, fieldNumber: 2)
    }
    if !self.modelVersionID.isEmpty {
      try visitor.visitSingularStringField(value: self.modelVersionID, fieldNumber: 3)
    }
    if !self.probeInputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.probeInputs, fieldNumber: 4)
    }
    if !self.poolInputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.poolInputs, fieldNumber: 5)
    }
    if self.favorClarifaiWorkflows != false {
      try visitor.visitSingularBoolField(value: self.favorClarifaiWorkflows, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostWorkflowResultsSimilarityRequest, rhs: Clarifai_Api_PostWorkflowResultsSimilarityRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.workflowID != rhs.workflowID {return false}
    if lhs.modelVersionID != rhs.modelVersionID {return false}
    if lhs.probeInputs != rhs.probeInputs {return false}
    if lhs.poolInputs != rhs.poolInputs {return false}
    if lhs.favorClarifaiWorkflows != rhs.favorClarifaiWorkflows {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostWorkflowResultsSimilarityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostWorkflowResultsSimilarityResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "results"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.results)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostWorkflowResultsSimilarityResponse, rhs: Clarifai_Api_PostWorkflowResultsSimilarityResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.results != rhs.results {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostAppDuplicationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostAppDuplicationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "app_duplications"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.appDuplications)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.appDuplications.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.appDuplications, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostAppDuplicationsRequest, rhs: Clarifai_Api_PostAppDuplicationsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.appDuplications != rhs.appDuplications {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetAppDuplicationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAppDuplicationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "app_duplication_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.appDuplicationID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.appDuplicationID.isEmpty {
      try visitor.visitSingularStringField(value: self.appDuplicationID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetAppDuplicationRequest, rhs: Clarifai_Api_GetAppDuplicationRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.appDuplicationID != rhs.appDuplicationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListAppDuplicationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAppDuplicationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListAppDuplicationsRequest, rhs: Clarifai_Api_ListAppDuplicationsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiAppDuplicationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiAppDuplicationsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "app_duplications"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.appDuplications)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.appDuplications.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.appDuplications, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiAppDuplicationsResponse, rhs: Clarifai_Api_MultiAppDuplicationsResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.appDuplications != rhs.appDuplications {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleAppDuplicationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleAppDuplicationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "app_duplication"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._appDuplication)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._appDuplication {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleAppDuplicationResponse, rhs: Clarifai_Api_SingleAppDuplicationResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._appDuplication != rhs._appDuplication {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostTasksRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostTasksRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "tasks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.tasks)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.tasks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tasks, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostTasksRequest, rhs: Clarifai_Api_PostTasksRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.tasks != rhs.tasks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetTaskRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "task_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.taskID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.taskID.isEmpty {
      try visitor.visitSingularStringField(value: self.taskID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetTaskRequest, rhs: Clarifai_Api_GetTaskRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.taskID != rhs.taskID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListTasksRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListTasksRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "per_page"),
    4: .standard(proto: "worker_user_ids"),
    5: .standard(proto: "review_user_ids"),
    6: .standard(proto: "including_label_order_tasks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      case 4: try decoder.decodeRepeatedStringField(value: &self.workerUserIds)
      case 5: try decoder.decodeRepeatedStringField(value: &self.reviewUserIds)
      case 6: try decoder.decodeSingularBoolField(value: &self.includingLabelOrderTasks)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 3)
    }
    if !self.workerUserIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.workerUserIds, fieldNumber: 4)
    }
    if !self.reviewUserIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.reviewUserIds, fieldNumber: 5)
    }
    if self.includingLabelOrderTasks != false {
      try visitor.visitSingularBoolField(value: self.includingLabelOrderTasks, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListTasksRequest, rhs: Clarifai_Api_ListTasksRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.workerUserIds != rhs.workerUserIds {return false}
    if lhs.reviewUserIds != rhs.reviewUserIds {return false}
    if lhs.includingLabelOrderTasks != rhs.includingLabelOrderTasks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PatchTasksRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchTasksRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "tasks"),
    3: .same(proto: "action"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.tasks)
      case 3: try decoder.decodeSingularStringField(value: &self.action)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.tasks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tasks, fieldNumber: 2)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PatchTasksRequest, rhs: Clarifai_Api_PatchTasksRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.tasks != rhs.tasks {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteTasksRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteTasksRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.ids)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteTasksRequest, rhs: Clarifai_Api_DeleteTasksRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiTaskResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "tasks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.tasks)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.tasks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tasks, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiTaskResponse, rhs: Clarifai_Api_MultiTaskResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.tasks != rhs.tasks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleTaskResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "task"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._task)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._task {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleTaskResponse, rhs: Clarifai_Api_SingleTaskResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._task != rhs._task {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostCollectorsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostCollectorsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "collectors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.collectors)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.collectors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collectors, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostCollectorsRequest, rhs: Clarifai_Api_PostCollectorsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.collectors != rhs.collectors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PatchCollectorsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PatchCollectorsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "collectors"),
    3: .same(proto: "action"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.collectors)
      case 3: try decoder.decodeSingularStringField(value: &self.action)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.collectors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collectors, fieldNumber: 2)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PatchCollectorsRequest, rhs: Clarifai_Api_PatchCollectorsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.collectors != rhs.collectors {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_DeleteCollectorsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteCollectorsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "ids"),
    3: .standard(proto: "delete_all"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.ids)
      case 3: try decoder.decodeSingularBoolField(value: &self.deleteAll)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    if self.deleteAll != false {
      try visitor.visitSingularBoolField(value: self.deleteAll, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_DeleteCollectorsRequest, rhs: Clarifai_Api_DeleteCollectorsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.deleteAll != rhs.deleteAll {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_GetCollectorRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCollectorRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "collector_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularStringField(value: &self.collectorID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.collectorID.isEmpty {
      try visitor.visitSingularStringField(value: self.collectorID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_GetCollectorRequest, rhs: Clarifai_Api_GetCollectorRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.collectorID != rhs.collectorID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_ListCollectorsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListCollectorsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .same(proto: "page"),
    3: .standard(proto: "per_page"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.page)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.perPage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.page != 0 {
      try visitor.visitSingularUInt32Field(value: self.page, fieldNumber: 2)
    }
    if self.perPage != 0 {
      try visitor.visitSingularUInt32Field(value: self.perPage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_ListCollectorsRequest, rhs: Clarifai_Api_ListCollectorsRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.page != rhs.page {return false}
    if lhs.perPage != rhs.perPage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiCollectorResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiCollectorResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "collectors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.collectors)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.collectors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collectors, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiCollectorResponse, rhs: Clarifai_Api_MultiCollectorResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.collectors != rhs.collectors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_SingleCollectorResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SingleCollectorResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "collector"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeSingularMessageField(value: &self._collector)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._collector {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_SingleCollectorResponse, rhs: Clarifai_Api_SingleCollectorResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._collector != rhs._collector {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostStatValuesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostStatValuesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "stat_values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.statValues)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.statValues.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.statValues, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostStatValuesRequest, rhs: Clarifai_Api_PostStatValuesRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.statValues != rhs.statValues {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiStatValueResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiStatValueResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "stat_values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.statValues)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.statValues.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.statValues, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiStatValueResponse, rhs: Clarifai_Api_MultiStatValueResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.statValues != rhs.statValues {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_PostStatValuesAggregateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostStatValuesAggregateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_app_id"),
    2: .standard(proto: "stat_value_aggregate_queries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._userAppID)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.statValueAggregateQueries)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userAppID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.statValueAggregateQueries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.statValueAggregateQueries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_PostStatValuesAggregateRequest, rhs: Clarifai_Api_PostStatValuesAggregateRequest) -> Bool {
    if lhs._userAppID != rhs._userAppID {return false}
    if lhs.statValueAggregateQueries != rhs.statValueAggregateQueries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_MultiStatValueAggregateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiStatValueAggregateResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "stat_value_aggregate_results"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._status)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.statValueAggregateResults)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.statValueAggregateResults.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.statValueAggregateResults, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_MultiStatValueAggregateResponse, rhs: Clarifai_Api_MultiStatValueAggregateResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs.statValueAggregateResults != rhs.statValueAggregateResults {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
