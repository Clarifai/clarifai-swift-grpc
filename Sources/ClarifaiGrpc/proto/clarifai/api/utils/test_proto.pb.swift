// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/clarifai/api/utils/test_proto.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Clarifai_Api_Utils_TestProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var message: String = String()

  public var value: Double = 0

  public var imageBytes: Data = SwiftProtobuf.Internal.emptyData

  public var oneOfField: Clarifai_Api_Utils_TestProto.OneOf_OneOfField? = nil

  public var stringOneof: String {
    get {
      if case .stringOneof(let v)? = oneOfField {return v}
      return String()
    }
    set {oneOfField = .stringOneof(newValue)}
  }

  public var boolOneof: Bool {
    get {
      if case .boolOneof(let v)? = oneOfField {return v}
      return false
    }
    set {oneOfField = .boolOneof(newValue)}
  }

  public var messageOneof: Clarifai_Api_Utils_TestProto2 {
    get {
      if case .messageOneof(let v)? = oneOfField {return v}
      return Clarifai_Api_Utils_TestProto2()
    }
    set {oneOfField = .messageOneof(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_OneOfField: Equatable {
    case stringOneof(String)
    case boolOneof(Bool)
    case messageOneof(Clarifai_Api_Utils_TestProto2)

  #if !swift(>=4.1)
    public static func ==(lhs: Clarifai_Api_Utils_TestProto.OneOf_OneOfField, rhs: Clarifai_Api_Utils_TestProto.OneOf_OneOfField) -> Bool {
      switch (lhs, rhs) {
      case (.stringOneof(let l), .stringOneof(let r)): return l == r
      case (.boolOneof(let l), .boolOneof(let r)): return l == r
      case (.messageOneof(let l), .messageOneof(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Clarifai_Api_Utils_TestProto2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var flip: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "clarifai.api.utils"

extension Clarifai_Api_Utils_TestProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TestProto"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "message"),
    3: .same(proto: "value"),
    4: .standard(proto: "image_bytes"),
    5: .standard(proto: "string_oneof"),
    6: .standard(proto: "bool_oneof"),
    7: .standard(proto: "message_oneof"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.message)
      case 3: try decoder.decodeSingularDoubleField(value: &self.value)
      case 4: try decoder.decodeSingularBytesField(value: &self.imageBytes)
      case 5:
        if self.oneOfField != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.oneOfField = .stringOneof(v)}
      case 6:
        if self.oneOfField != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.oneOfField = .boolOneof(v)}
      case 7:
        var v: Clarifai_Api_Utils_TestProto2?
        if let current = self.oneOfField {
          try decoder.handleConflictingOneOf()
          if case .messageOneof(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.oneOfField = .messageOneof(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if self.value != 0 {
      try visitor.visitSingularDoubleField(value: self.value, fieldNumber: 3)
    }
    if !self.imageBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.imageBytes, fieldNumber: 4)
    }
    switch self.oneOfField {
    case .stringOneof(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    case .boolOneof(let v)?:
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    case .messageOneof(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_Utils_TestProto, rhs: Clarifai_Api_Utils_TestProto) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.message != rhs.message {return false}
    if lhs.value != rhs.value {return false}
    if lhs.imageBytes != rhs.imageBytes {return false}
    if lhs.oneOfField != rhs.oneOfField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clarifai_Api_Utils_TestProto2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TestProto2"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "flip"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularBoolField(value: &self.flip)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.flip != false {
      try visitor.visitSingularBoolField(value: self.flip, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clarifai_Api_Utils_TestProto2, rhs: Clarifai_Api_Utils_TestProto2) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.flip != rhs.flip {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
