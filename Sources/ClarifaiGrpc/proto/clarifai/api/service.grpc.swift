//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: proto/clarifai/api/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Clarifai_Api_V2Client, then call methods of this protocol to make API calls.
public protocol Clarifai_Api_V2ClientProtocol: GRPCClient {
  func getConceptCounts(
    _ request: Clarifai_Api_GetConceptCountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetConceptCountsRequest, Clarifai_Api_MultiConceptCountResponse>

  func getConcept(
    _ request: Clarifai_Api_GetConceptRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetConceptRequest, Clarifai_Api_SingleConceptResponse>

  func listConcepts(
    _ request: Clarifai_Api_ListConceptsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListConceptsRequest, Clarifai_Api_MultiConceptResponse>

  func postConceptsSearches(
    _ request: Clarifai_Api_PostConceptsSearchesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostConceptsSearchesRequest, Clarifai_Api_MultiConceptResponse>

  func postConcepts(
    _ request: Clarifai_Api_PostConceptsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostConceptsRequest, Clarifai_Api_MultiConceptResponse>

  func patchConcepts(
    _ request: Clarifai_Api_PatchConceptsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PatchConceptsRequest, Clarifai_Api_MultiConceptResponse>

  func getConceptLanguage(
    _ request: Clarifai_Api_GetConceptLanguageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetConceptLanguageRequest, Clarifai_Api_SingleConceptLanguageResponse>

  func listConceptLanguages(
    _ request: Clarifai_Api_ListConceptLanguagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListConceptLanguagesRequest, Clarifai_Api_MultiConceptLanguageResponse>

  func postConceptLanguages(
    _ request: Clarifai_Api_PostConceptLanguagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostConceptLanguagesRequest, Clarifai_Api_MultiConceptLanguageResponse>

  func patchConceptLanguages(
    _ request: Clarifai_Api_PatchConceptLanguagesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PatchConceptLanguagesRequest, Clarifai_Api_MultiConceptLanguageResponse>

  func listConceptRelations(
    _ request: Clarifai_Api_ListConceptRelationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListConceptRelationsRequest, Clarifai_Api_MultiConceptRelationResponse>

  func postConceptRelations(
    _ request: Clarifai_Api_PostConceptRelationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostConceptRelationsRequest, Clarifai_Api_MultiConceptRelationResponse>

  func deleteConceptRelations(
    _ request: Clarifai_Api_DeleteConceptRelationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteConceptRelationsRequest, Clarifai_Api_Status_BaseResponse>

  func listKnowledgeGraphs(
    _ request: Clarifai_Api_ListKnowledgeGraphsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListKnowledgeGraphsRequest, Clarifai_Api_MultiKnowledgeGraphResponse>

  func postKnowledgeGraphs(
    _ request: Clarifai_Api_PostKnowledgeGraphsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostKnowledgeGraphsRequest, Clarifai_Api_MultiKnowledgeGraphResponse>

  func postConceptMappingJobs(
    _ request: Clarifai_Api_PostConceptMappingJobsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostConceptMappingJobsRequest, Clarifai_Api_MultiConceptMappingJobResponse>

  func getAnnotation(
    _ request: Clarifai_Api_GetAnnotationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetAnnotationRequest, Clarifai_Api_SingleAnnotationResponse>

  func listAnnotations(
    _ request: Clarifai_Api_ListAnnotationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListAnnotationsRequest, Clarifai_Api_MultiAnnotationResponse>

  func postAnnotations(
    _ request: Clarifai_Api_PostAnnotationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostAnnotationsRequest, Clarifai_Api_MultiAnnotationResponse>

  func patchAnnotations(
    _ request: Clarifai_Api_PatchAnnotationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PatchAnnotationsRequest, Clarifai_Api_MultiAnnotationResponse>

  func deleteAnnotation(
    _ request: Clarifai_Api_DeleteAnnotationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteAnnotationRequest, Clarifai_Api_Status_BaseResponse>

  func deleteAnnotations(
    _ request: Clarifai_Api_DeleteAnnotationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteAnnotationsRequest, Clarifai_Api_Status_BaseResponse>

  func postAnnotationsSearches(
    _ request: Clarifai_Api_PostAnnotationsSearchesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostAnnotationsSearchesRequest, Clarifai_Api_MultiSearchResponse>

  func getInputCount(
    _ request: Clarifai_Api_GetInputCountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetInputCountRequest, Clarifai_Api_SingleInputCountResponse>

  func streamInputs(
    _ request: Clarifai_Api_StreamInputsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_StreamInputsRequest, Clarifai_Api_MultiInputResponse>

  func getInput(
    _ request: Clarifai_Api_GetInputRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetInputRequest, Clarifai_Api_SingleInputResponse>

  func listInputs(
    _ request: Clarifai_Api_ListInputsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListInputsRequest, Clarifai_Api_MultiInputResponse>

  func postInputs(
    _ request: Clarifai_Api_PostInputsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostInputsRequest, Clarifai_Api_MultiInputResponse>

  func patchInputs(
    _ request: Clarifai_Api_PatchInputsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PatchInputsRequest, Clarifai_Api_MultiInputResponse>

  func deleteInput(
    _ request: Clarifai_Api_DeleteInputRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteInputRequest, Clarifai_Api_Status_BaseResponse>

  func deleteInputs(
    _ request: Clarifai_Api_DeleteInputsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteInputsRequest, Clarifai_Api_Status_BaseResponse>

  func postInputsSearches(
    _ request: Clarifai_Api_PostInputsSearchesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostInputsSearchesRequest, Clarifai_Api_MultiSearchResponse>

  func postModelOutputs(
    _ request: Clarifai_Api_PostModelOutputsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostModelOutputsRequest, Clarifai_Api_MultiOutputResponse>

  func getModelType(
    _ request: Clarifai_Api_GetModelTypeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetModelTypeRequest, Clarifai_Api_SingleModelTypeResponse>

  func listModelTypes(
    _ request: Clarifai_Api_ListModelTypesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListModelTypesRequest, Clarifai_Api_MultiModelTypeResponse>

  func getModel(
    _ request: Clarifai_Api_GetModelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetModelRequest, Clarifai_Api_SingleModelResponse>

  func getModelOutputInfo(
    _ request: Clarifai_Api_GetModelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetModelRequest, Clarifai_Api_SingleModelResponse>

  func listModels(
    _ request: Clarifai_Api_ListModelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListModelsRequest, Clarifai_Api_MultiModelResponse>

  func postModelsSearches(
    _ request: Clarifai_Api_PostModelsSearchesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostModelsSearchesRequest, Clarifai_Api_MultiModelResponse>

  func postModels(
    _ request: Clarifai_Api_PostModelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostModelsRequest, Clarifai_Api_SingleModelResponse>

  func patchModels(
    _ request: Clarifai_Api_PatchModelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PatchModelsRequest, Clarifai_Api_MultiModelResponse>

  func deleteModel(
    _ request: Clarifai_Api_DeleteModelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteModelRequest, Clarifai_Api_Status_BaseResponse>

  func deleteModels(
    _ request: Clarifai_Api_DeleteModelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteModelsRequest, Clarifai_Api_Status_BaseResponse>

  func listModelInputs(
    _ request: Clarifai_Api_ListModelInputsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListModelInputsRequest, Clarifai_Api_MultiInputResponse>

  func getModelVersion(
    _ request: Clarifai_Api_GetModelVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetModelVersionRequest, Clarifai_Api_SingleModelVersionResponse>

  func listModelVersions(
    _ request: Clarifai_Api_ListModelVersionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListModelVersionsRequest, Clarifai_Api_MultiModelVersionResponse>

  func postModelVersions(
    _ request: Clarifai_Api_PostModelVersionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostModelVersionsRequest, Clarifai_Api_SingleModelResponse>

  func deleteModelVersion(
    _ request: Clarifai_Api_DeleteModelVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteModelVersionRequest, Clarifai_Api_Status_BaseResponse>

  func getModelVersionMetrics(
    _ request: Clarifai_Api_GetModelVersionMetricsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetModelVersionMetricsRequest, Clarifai_Api_SingleModelVersionResponse>

  func postModelVersionMetrics(
    _ request: Clarifai_Api_PostModelVersionMetricsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostModelVersionMetricsRequest, Clarifai_Api_SingleModelVersionResponse>

  func getWorkflow(
    _ request: Clarifai_Api_GetWorkflowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetWorkflowRequest, Clarifai_Api_SingleWorkflowResponse>

  func listWorkflows(
    _ request: Clarifai_Api_ListWorkflowsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListWorkflowsRequest, Clarifai_Api_MultiWorkflowResponse>

  func postWorkflows(
    _ request: Clarifai_Api_PostWorkflowsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostWorkflowsRequest, Clarifai_Api_MultiWorkflowResponse>

  func patchWorkflows(
    _ request: Clarifai_Api_PatchWorkflowsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PatchWorkflowsRequest, Clarifai_Api_MultiWorkflowResponse>

  func deleteWorkflow(
    _ request: Clarifai_Api_DeleteWorkflowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteWorkflowRequest, Clarifai_Api_Status_BaseResponse>

  func deleteWorkflows(
    _ request: Clarifai_Api_DeleteWorkflowsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteWorkflowsRequest, Clarifai_Api_Status_BaseResponse>

  func postWorkflowResults(
    _ request: Clarifai_Api_PostWorkflowResultsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostWorkflowResultsRequest, Clarifai_Api_PostWorkflowResultsResponse>

  func postWorkflowResultsSimilarity(
    _ request: Clarifai_Api_PostWorkflowResultsSimilarityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostWorkflowResultsSimilarityRequest, Clarifai_Api_PostWorkflowResultsSimilarityResponse>

  func getKey(
    _ request: Clarifai_Api_GetKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetKeyRequest, Clarifai_Api_SingleKeyResponse>

  func listKeys(
    _ request: Clarifai_Api_ListKeysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListKeysRequest, Clarifai_Api_MultiKeyResponse>

  func listAppKeys(
    _ request: Clarifai_Api_ListAppKeysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListAppKeysRequest, Clarifai_Api_MultiKeyResponse>

  func deleteKey(
    _ request: Clarifai_Api_DeleteKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteKeyRequest, Clarifai_Api_Status_BaseResponse>

  func postKeys(
    _ request: Clarifai_Api_PostKeysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostKeysRequest, Clarifai_Api_MultiKeyResponse>

  func patchKeys(
    _ request: Clarifai_Api_PatchKeysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PatchKeysRequest, Clarifai_Api_MultiKeyResponse>

  func myScopes(
    _ request: Clarifai_Api_MyScopesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_MyScopesRequest, Clarifai_Api_MultiScopeResponse>

  func listScopes(
    _ request: Clarifai_Api_ListScopesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListScopesRequest, Clarifai_Api_MultiScopeDepsResponse>

  func getApp(
    _ request: Clarifai_Api_GetAppRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetAppRequest, Clarifai_Api_SingleAppResponse>

  func listApps(
    _ request: Clarifai_Api_ListAppsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListAppsRequest, Clarifai_Api_MultiAppResponse>

  func deleteApp(
    _ request: Clarifai_Api_DeleteAppRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteAppRequest, Clarifai_Api_Status_BaseResponse>

  func postApps(
    _ request: Clarifai_Api_PostAppsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostAppsRequest, Clarifai_Api_MultiAppResponse>

  func patchApps(
    _ request: Clarifai_Api_PatchAppsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PatchAppsRequest, Clarifai_Api_MultiAppResponse>

  func postAppsSearches(
    _ request: Clarifai_Api_PostAppsSearchesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostAppsSearchesRequest, Clarifai_Api_MultiAppResponse>

  func postValidatePassword(
    _ request: Clarifai_Api_PostValidatePasswordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostValidatePasswordRequest, Clarifai_Api_SinglePasswordValidationResponse>

  func getSearch(
    _ request: Clarifai_Api_GetSearchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetSearchRequest, Clarifai_Api_SingleSearchResponse>

  func listSearches(
    _ request: Clarifai_Api_ListSearchesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListSearchesRequest, Clarifai_Api_MultiSearchResponse>

  func postSearches(
    _ request: Clarifai_Api_PostSearchesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostSearchesRequest, Clarifai_Api_MultiSearchResponse>

  func postSearchesByID(
    _ request: Clarifai_Api_PostSearchesByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostSearchesByIDRequest, Clarifai_Api_MultiSearchResponse>

  func postAnnotationSearchMetrics(
    _ request: Clarifai_Api_PostAnnotationSearchMetricsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostAnnotationSearchMetricsRequest, Clarifai_Api_MultiAnnotationSearchMetricsResponse>

  func getAnnotationSearchMetrics(
    _ request: Clarifai_Api_GetAnnotationSearchMetricsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetAnnotationSearchMetricsRequest, Clarifai_Api_MultiAnnotationSearchMetricsResponse>

  func listAnnotationSearchMetrics(
    _ request: Clarifai_Api_ListAnnotationSearchMetricsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListAnnotationSearchMetricsRequest, Clarifai_Api_MultiAnnotationSearchMetricsResponse>

  func deleteAnnotationSearchMetrics(
    _ request: Clarifai_Api_DeleteAnnotationSearchMetricsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteAnnotationSearchMetricsRequest, Clarifai_Api_Status_BaseResponse>

  func deleteSearch(
    _ request: Clarifai_Api_DeleteSearchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteSearchRequest, Clarifai_Api_Status_BaseResponse>

  func listStatusCodes(
    _ request: Clarifai_Api_ListStatusCodesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListStatusCodesRequest, Clarifai_Api_MultiStatusCodeResponse>

  func getStatusCode(
    _ request: Clarifai_Api_GetStatusCodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetStatusCodeRequest, Clarifai_Api_SingleStatusCodeResponse>

  func listCollaborators(
    _ request: Clarifai_Api_ListCollaboratorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListCollaboratorsRequest, Clarifai_Api_MultiCollaboratorsResponse>

  func postCollaborators(
    _ request: Clarifai_Api_PostCollaboratorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostCollaboratorsRequest, Clarifai_Api_MultiCollaboratorsResponse>

  func patchCollaborators(
    _ request: Clarifai_Api_PatchCollaboratorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PatchCollaboratorsRequest, Clarifai_Api_MultiCollaboratorsResponse>

  func deleteCollaborators(
    _ request: Clarifai_Api_DeleteCollaboratorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteCollaboratorsRequest, Clarifai_Api_Status_BaseResponse>

  func listCollaborations(
    _ request: Clarifai_Api_ListCollaborationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListCollaborationsRequest, Clarifai_Api_MultiCollaborationsResponse>

  func postAppDuplications(
    _ request: Clarifai_Api_PostAppDuplicationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostAppDuplicationsRequest, Clarifai_Api_MultiAppDuplicationsResponse>

  func listAppDuplications(
    _ request: Clarifai_Api_ListAppDuplicationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListAppDuplicationsRequest, Clarifai_Api_MultiAppDuplicationsResponse>

  func getAppDuplication(
    _ request: Clarifai_Api_GetAppDuplicationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetAppDuplicationRequest, Clarifai_Api_SingleAppDuplicationResponse>

  func postTasks(
    _ request: Clarifai_Api_PostTasksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostTasksRequest, Clarifai_Api_MultiTaskResponse>

  func getTask(
    _ request: Clarifai_Api_GetTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetTaskRequest, Clarifai_Api_SingleTaskResponse>

  func listTasks(
    _ request: Clarifai_Api_ListTasksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListTasksRequest, Clarifai_Api_MultiTaskResponse>

  func patchTasks(
    _ request: Clarifai_Api_PatchTasksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PatchTasksRequest, Clarifai_Api_MultiTaskResponse>

  func deleteTasks(
    _ request: Clarifai_Api_DeleteTasksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteTasksRequest, Clarifai_Api_Status_BaseResponse>

  func postCollectors(
    _ request: Clarifai_Api_PostCollectorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostCollectorsRequest, Clarifai_Api_MultiCollectorResponse>

  func getCollector(
    _ request: Clarifai_Api_GetCollectorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_GetCollectorRequest, Clarifai_Api_SingleCollectorResponse>

  func listCollectors(
    _ request: Clarifai_Api_ListCollectorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_ListCollectorsRequest, Clarifai_Api_MultiCollectorResponse>

  func patchCollectors(
    _ request: Clarifai_Api_PatchCollectorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PatchCollectorsRequest, Clarifai_Api_MultiCollectorResponse>

  func deleteCollectors(
    _ request: Clarifai_Api_DeleteCollectorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_DeleteCollectorsRequest, Clarifai_Api_Status_BaseResponse>

  func postStatValues(
    _ request: Clarifai_Api_PostStatValuesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostStatValuesRequest, Clarifai_Api_MultiStatValueResponse>

  func postStatValuesAggregate(
    _ request: Clarifai_Api_PostStatValuesAggregateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Clarifai_Api_PostStatValuesAggregateRequest, Clarifai_Api_MultiStatValueAggregateResponse>

}

extension Clarifai_Api_V2ClientProtocol {

  /// List all the concepts with their positive and negative counts
  ///
  /// - Parameters:
  ///   - request: Request to send to GetConceptCounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getConceptCounts(
    _ request: Clarifai_Api_GetConceptCountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetConceptCountsRequest, Clarifai_Api_MultiConceptCountResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetConceptCounts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get a specific concept from an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetConcept.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getConcept(
    _ request: Clarifai_Api_GetConceptRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetConceptRequest, Clarifai_Api_SingleConceptResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetConcept",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List all the concepts.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListConcepts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listConcepts(
    _ request: Clarifai_Api_ListConceptsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListConceptsRequest, Clarifai_Api_MultiConceptResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListConcepts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Search over the concepts to find one or more you're looking for.
  /// This leverage the "body" parameter because we also have page and
  /// per_page as url query param variables in this request.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostConceptsSearches.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postConceptsSearches(
    _ request: Clarifai_Api_PostConceptsSearchesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostConceptsSearchesRequest, Clarifai_Api_MultiConceptResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostConceptsSearches",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Add a concept to an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostConcepts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postConcepts(
    _ request: Clarifai_Api_PostConceptsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostConceptsRequest, Clarifai_Api_MultiConceptResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostConcepts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Patch one or more concepts.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchConcepts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchConcepts(
    _ request: Clarifai_Api_PatchConceptsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PatchConceptsRequest, Clarifai_Api_MultiConceptResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PatchConcepts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get a specific concept from an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetConceptLanguage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getConceptLanguage(
    _ request: Clarifai_Api_GetConceptLanguageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetConceptLanguageRequest, Clarifai_Api_SingleConceptLanguageResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetConceptLanguage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List the concept in all the translated languages.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListConceptLanguages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listConceptLanguages(
    _ request: Clarifai_Api_ListConceptLanguagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListConceptLanguagesRequest, Clarifai_Api_MultiConceptLanguageResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListConceptLanguages",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Add a new tranlsation for this concept.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostConceptLanguages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postConceptLanguages(
    _ request: Clarifai_Api_PostConceptLanguagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostConceptLanguagesRequest, Clarifai_Api_MultiConceptLanguageResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostConceptLanguages",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Patch the name for a given language names by passing in a list of concepts with the new names
  /// for the languages.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchConceptLanguages.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchConceptLanguages(
    _ request: Clarifai_Api_PatchConceptLanguagesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PatchConceptLanguagesRequest, Clarifai_Api_MultiConceptLanguageResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PatchConceptLanguages",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List concept relations between concepts in the platform.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListConceptRelations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listConceptRelations(
    _ request: Clarifai_Api_ListConceptRelationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListConceptRelationsRequest, Clarifai_Api_MultiConceptRelationResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListConceptRelations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Post concept relations to create relations between concepts in the platform.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostConceptRelations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postConceptRelations(
    _ request: Clarifai_Api_PostConceptRelationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostConceptRelationsRequest, Clarifai_Api_MultiConceptRelationResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostConceptRelations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Post concept relations to create relations between concepts in the platform.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteConceptRelations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteConceptRelations(
    _ request: Clarifai_Api_DeleteConceptRelationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteConceptRelationsRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteConceptRelations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List all domain graphs.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListKnowledgeGraphs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listKnowledgeGraphs(
    _ request: Clarifai_Api_ListKnowledgeGraphsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListKnowledgeGraphsRequest, Clarifai_Api_MultiKnowledgeGraphResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListKnowledgeGraphs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Post domain graphs.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostKnowledgeGraphs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postKnowledgeGraphs(
    _ request: Clarifai_Api_PostKnowledgeGraphsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostKnowledgeGraphsRequest, Clarifai_Api_MultiKnowledgeGraphResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostKnowledgeGraphs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Start concept mapping jobs.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostConceptMappingJobs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postConceptMappingJobs(
    _ request: Clarifai_Api_PostConceptMappingJobsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostConceptMappingJobsRequest, Clarifai_Api_MultiConceptMappingJobResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostConceptMappingJobs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get a specific annotation from an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAnnotation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAnnotation(
    _ request: Clarifai_Api_GetAnnotationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetAnnotationRequest, Clarifai_Api_SingleAnnotationResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetAnnotation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List all the annotation.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListAnnotations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listAnnotations(
    _ request: Clarifai_Api_ListAnnotationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListAnnotationsRequest, Clarifai_Api_MultiAnnotationResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListAnnotations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Post annotations.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostAnnotations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postAnnotations(
    _ request: Clarifai_Api_PostAnnotationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostAnnotationsRequest, Clarifai_Api_MultiAnnotationResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostAnnotations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Patch one or more annotations.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchAnnotations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchAnnotations(
    _ request: Clarifai_Api_PatchAnnotationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PatchAnnotationsRequest, Clarifai_Api_MultiAnnotationResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PatchAnnotations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete a single annotation.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAnnotation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteAnnotation(
    _ request: Clarifai_Api_DeleteAnnotationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteAnnotationRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteAnnotation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete multiple annotations in one request.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAnnotations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteAnnotations(
    _ request: Clarifai_Api_DeleteAnnotationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteAnnotationsRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteAnnotations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Execute a search over annotation
  ///
  /// - Parameters:
  ///   - request: Request to send to PostAnnotationsSearches.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postAnnotationsSearches(
    _ request: Clarifai_Api_PostAnnotationsSearchesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostAnnotationsSearchesRequest, Clarifai_Api_MultiSearchResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostAnnotationsSearches",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Patch one or more inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInputCount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInputCount(
    _ request: Clarifai_Api_GetInputCountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetInputCountRequest, Clarifai_Api_SingleInputCountResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetInputCount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Streams all the inputs starting from oldest assets.
  ///
  /// - Parameters:
  ///   - request: Request to send to StreamInputs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func streamInputs(
    _ request: Clarifai_Api_StreamInputsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_StreamInputsRequest, Clarifai_Api_MultiInputResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/StreamInputs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get a specific input from an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInput.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInput(
    _ request: Clarifai_Api_GetInputRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetInputRequest, Clarifai_Api_SingleInputResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetInput",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List all the inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListInputs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listInputs(
    _ request: Clarifai_Api_ListInputsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListInputsRequest, Clarifai_Api_MultiInputResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListInputs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Add an input (or set of inputs) to an app.
  /// This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
  /// it is asynchronous.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostInputs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postInputs(
    _ request: Clarifai_Api_PostInputsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostInputsRequest, Clarifai_Api_MultiInputResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostInputs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Patch one or more inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchInputs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchInputs(
    _ request: Clarifai_Api_PatchInputsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PatchInputsRequest, Clarifai_Api_MultiInputResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PatchInputs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete a single input.  This call is synchronous.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteInput.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteInput(
    _ request: Clarifai_Api_DeleteInputRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteInputRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteInput",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete multiple inputs in one request.
  /// This call is asynchronous. Use DeleteInput if you want a synchronous version.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteInputs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteInputs(
    _ request: Clarifai_Api_DeleteInputsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteInputsRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteInputs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Execute a search over input
  ///
  /// - Parameters:
  ///   - request: Request to send to PostInputsSearches.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postInputsSearches(
    _ request: Clarifai_Api_PostInputsSearchesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostInputsSearchesRequest, Clarifai_Api_MultiSearchResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostInputsSearches",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get predicted outputs from the model.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostModelOutputs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postModelOutputs(
    _ request: Clarifai_Api_PostModelOutputsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostModelOutputsRequest, Clarifai_Api_MultiOutputResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostModelOutputs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get a specific model type.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetModelType.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getModelType(
    _ request: Clarifai_Api_GetModelTypeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetModelTypeRequest, Clarifai_Api_SingleModelTypeResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetModelType",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List all the model types available in the platform.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListModelTypes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listModelTypes(
    _ request: Clarifai_Api_ListModelTypesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListModelTypesRequest, Clarifai_Api_MultiModelTypeResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListModelTypes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get a specific model from an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetModel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getModel(
    _ request: Clarifai_Api_GetModelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetModelRequest, Clarifai_Api_SingleModelResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetModel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get a the output info for a given model_id or model_id/version_id
  /// combo.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetModelOutputInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getModelOutputInfo(
    _ request: Clarifai_Api_GetModelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetModelRequest, Clarifai_Api_SingleModelResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetModelOutputInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List all the models.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListModels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listModels(
    _ request: Clarifai_Api_ListModelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListModelsRequest, Clarifai_Api_MultiModelResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListModels",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Search over the models to find one or more you're looking for.
  /// This leverage the "body" parameter because we also have page and
  /// per_page as url query param variables in this request.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostModelsSearches.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postModelsSearches(
    _ request: Clarifai_Api_PostModelsSearchesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostModelsSearchesRequest, Clarifai_Api_MultiModelResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostModelsSearches",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Add a models to an app.
  /// FIXME(zeiler): this should have been a plural response.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostModels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postModels(
    _ request: Clarifai_Api_PostModelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostModelsRequest, Clarifai_Api_SingleModelResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostModels",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Patch one or more models.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchModels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchModels(
    _ request: Clarifai_Api_PatchModelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PatchModelsRequest, Clarifai_Api_MultiModelResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PatchModels",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete a single model.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteModel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteModel(
    _ request: Clarifai_Api_DeleteModelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteModelRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteModel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete multiple models in one request.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteModels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteModels(
    _ request: Clarifai_Api_DeleteModelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteModelsRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteModels",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List all the inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListModelInputs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listModelInputs(
    _ request: Clarifai_Api_ListModelInputsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListModelInputsRequest, Clarifai_Api_MultiInputResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListModelInputs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get a specific model from an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetModelVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getModelVersion(
    _ request: Clarifai_Api_GetModelVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetModelVersionRequest, Clarifai_Api_SingleModelVersionResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetModelVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List all the models.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListModelVersions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listModelVersions(
    _ request: Clarifai_Api_ListModelVersionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListModelVersionsRequest, Clarifai_Api_MultiModelVersionResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListModelVersions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Create a new model version to trigger training of the model.
  /// FIXME(zeiler): this should have been a plural response.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostModelVersions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postModelVersions(
    _ request: Clarifai_Api_PostModelVersionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostModelVersionsRequest, Clarifai_Api_SingleModelResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostModelVersions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete a single model.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteModelVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteModelVersion(
    _ request: Clarifai_Api_DeleteModelVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteModelVersionRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteModelVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get the evaluation metrics for a model version.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetModelVersionMetrics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getModelVersionMetrics(
    _ request: Clarifai_Api_GetModelVersionMetricsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetModelVersionMetricsRequest, Clarifai_Api_SingleModelVersionResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetModelVersionMetrics",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Run the evaluation metrics for a model version.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostModelVersionMetrics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postModelVersionMetrics(
    _ request: Clarifai_Api_PostModelVersionMetricsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostModelVersionMetricsRequest, Clarifai_Api_SingleModelVersionResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostModelVersionMetrics",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get a specific workflow from an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetWorkflow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getWorkflow(
    _ request: Clarifai_Api_GetWorkflowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetWorkflowRequest, Clarifai_Api_SingleWorkflowResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetWorkflow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List all the workflows.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListWorkflows.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listWorkflows(
    _ request: Clarifai_Api_ListWorkflowsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListWorkflowsRequest, Clarifai_Api_MultiWorkflowResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListWorkflows",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Add a workflow to an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostWorkflows.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postWorkflows(
    _ request: Clarifai_Api_PostWorkflowsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostWorkflowsRequest, Clarifai_Api_MultiWorkflowResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostWorkflows",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Patch one or more workflows.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchWorkflows.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchWorkflows(
    _ request: Clarifai_Api_PatchWorkflowsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PatchWorkflowsRequest, Clarifai_Api_MultiWorkflowResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PatchWorkflows",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete a single workflow.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteWorkflow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteWorkflow(
    _ request: Clarifai_Api_DeleteWorkflowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteWorkflowRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteWorkflow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete multiple workflows in one request.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteWorkflows.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteWorkflows(
    _ request: Clarifai_Api_DeleteWorkflowsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteWorkflowsRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteWorkflows",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Predict using a workflow.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostWorkflowResults.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postWorkflowResults(
    _ request: Clarifai_Api_PostWorkflowResultsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostWorkflowResultsRequest, Clarifai_Api_PostWorkflowResultsResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostWorkflowResults",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to PostWorkflowResultsSimilarity
  ///
  /// - Parameters:
  ///   - request: Request to send to PostWorkflowResultsSimilarity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postWorkflowResultsSimilarity(
    _ request: Clarifai_Api_PostWorkflowResultsSimilarityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostWorkflowResultsSimilarityRequest, Clarifai_Api_PostWorkflowResultsSimilarityResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostWorkflowResultsSimilarity",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get a specific key from an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getKey(
    _ request: Clarifai_Api_GetKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetKeyRequest, Clarifai_Api_SingleKeyResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List all the keys.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListKeys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listKeys(
    _ request: Clarifai_Api_ListKeysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListKeysRequest, Clarifai_Api_MultiKeyResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListKeys",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List keys by app_id
  ///
  /// - Parameters:
  ///   - request: Request to send to ListAppKeys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listAppKeys(
    _ request: Clarifai_Api_ListAppKeysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListAppKeysRequest, Clarifai_Api_MultiKeyResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListAppKeys",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Search over the keys to find one or more you're looking for.
  /// This leverage the "body" parameter because we also have page and
  /// per_page as url query param variables in this request.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteKey(
    _ request: Clarifai_Api_DeleteKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteKeyRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Add a key to an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostKeys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postKeys(
    _ request: Clarifai_Api_PostKeysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostKeysRequest, Clarifai_Api_MultiKeyResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostKeys",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Patch one or more keys.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchKeys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchKeys(
    _ request: Clarifai_Api_PatchKeysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PatchKeysRequest, Clarifai_Api_MultiKeyResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PatchKeys",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// API Keys in the public API -- request is itself Key authorized, and will tell
  /// the user the scopes/access of the key/credential they're providing, as computed by
  /// our authorizer:
  ///
  /// - Parameters:
  ///   - request: Request to send to MyScopes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func myScopes(
    _ request: Clarifai_Api_MyScopesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_MyScopesRequest, Clarifai_Api_MultiScopeResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/MyScopes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List all auth scopes available.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListScopes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listScopes(
    _ request: Clarifai_Api_ListScopesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListScopesRequest, Clarifai_Api_MultiScopeDepsResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListScopes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get a specific app from an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetApp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getApp(
    _ request: Clarifai_Api_GetAppRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetAppRequest, Clarifai_Api_SingleAppResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetApp",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List all the apps.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListApps.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listApps(
    _ request: Clarifai_Api_ListAppsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListAppsRequest, Clarifai_Api_MultiAppResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListApps",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Search over the apps to find one or more you're looking for.
  /// This leverage the "body" parameter because we also have page and
  /// per_page as url query param variables in this request.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteApp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteApp(
    _ request: Clarifai_Api_DeleteAppRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteAppRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteApp",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Add a app to an app.
  /// This needs to load the default workflow to make a copy, validating all the models in it, and
  /// then writing the new workflow back to this new app.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostApps.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postApps(
    _ request: Clarifai_Api_PostAppsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostAppsRequest, Clarifai_Api_MultiAppResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostApps",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Patch one or more apps.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchApps.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchApps(
    _ request: Clarifai_Api_PatchAppsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PatchAppsRequest, Clarifai_Api_MultiAppResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PatchApps",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Search over the applications to find one or more you're looking for.
  /// This leverage the "body" parameter because we also have page and
  /// per_page as url query param variables in this request.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostAppsSearches.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postAppsSearches(
    _ request: Clarifai_Api_PostAppsSearchesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostAppsSearchesRequest, Clarifai_Api_MultiAppResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostAppsSearches",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Validate new password in real-time for a user
  ///
  /// - Parameters:
  ///   - request: Request to send to PostValidatePassword.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postValidatePassword(
    _ request: Clarifai_Api_PostValidatePasswordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostValidatePasswordRequest, Clarifai_Api_SinglePasswordValidationResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostValidatePassword",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get a saved search.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSearch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getSearch(
    _ request: Clarifai_Api_GetSearchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetSearchRequest, Clarifai_Api_SingleSearchResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetSearch",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List all saved searches.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSearches.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listSearches(
    _ request: Clarifai_Api_ListSearchesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListSearchesRequest, Clarifai_Api_MultiSearchResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListSearches",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Execute a new search and optionally save it.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostSearches.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postSearches(
    _ request: Clarifai_Api_PostSearchesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostSearchesRequest, Clarifai_Api_MultiSearchResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostSearches",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Execute a previously saved search.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostSearchesByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postSearchesByID(
    _ request: Clarifai_Api_PostSearchesByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostSearchesByIDRequest, Clarifai_Api_MultiSearchResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostSearchesByID",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Evaluate the results of two search requests
  ///
  /// - Parameters:
  ///   - request: Request to send to PostAnnotationSearchMetrics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postAnnotationSearchMetrics(
    _ request: Clarifai_Api_PostAnnotationSearchMetricsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostAnnotationSearchMetricsRequest, Clarifai_Api_MultiAnnotationSearchMetricsResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostAnnotationSearchMetrics",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get the evaluation results between two search requests
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAnnotationSearchMetrics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAnnotationSearchMetrics(
    _ request: Clarifai_Api_GetAnnotationSearchMetricsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetAnnotationSearchMetricsRequest, Clarifai_Api_MultiAnnotationSearchMetricsResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetAnnotationSearchMetrics",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List the evaluation results between two search requests
  ///
  /// - Parameters:
  ///   - request: Request to send to ListAnnotationSearchMetrics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listAnnotationSearchMetrics(
    _ request: Clarifai_Api_ListAnnotationSearchMetricsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListAnnotationSearchMetricsRequest, Clarifai_Api_MultiAnnotationSearchMetricsResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListAnnotationSearchMetrics",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to DeleteAnnotationSearchMetrics
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAnnotationSearchMetrics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteAnnotationSearchMetrics(
    _ request: Clarifai_Api_DeleteAnnotationSearchMetricsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteAnnotationSearchMetricsRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteAnnotationSearchMetrics",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete a saved search.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSearch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteSearch(
    _ request: Clarifai_Api_DeleteSearchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteSearchRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteSearch",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List all status codes.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListStatusCodes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listStatusCodes(
    _ request: Clarifai_Api_ListStatusCodesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListStatusCodesRequest, Clarifai_Api_MultiStatusCodeResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListStatusCodes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get more details for a status code.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetStatusCode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getStatusCode(
    _ request: Clarifai_Api_GetStatusCodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetStatusCodeRequest, Clarifai_Api_SingleStatusCodeResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetStatusCode",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// owner list users who the app is shared with
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCollaborators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listCollaborators(
    _ request: Clarifai_Api_ListCollaboratorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListCollaboratorsRequest, Clarifai_Api_MultiCollaboratorsResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListCollaborators",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// add collaborators to an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostCollaborators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postCollaborators(
    _ request: Clarifai_Api_PostCollaboratorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostCollaboratorsRequest, Clarifai_Api_MultiCollaboratorsResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostCollaborators",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Patch existing collaborators.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchCollaborators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchCollaborators(
    _ request: Clarifai_Api_PatchCollaboratorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PatchCollaboratorsRequest, Clarifai_Api_MultiCollaboratorsResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PatchCollaborators",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete existing collaborators.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteCollaborators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteCollaborators(
    _ request: Clarifai_Api_DeleteCollaboratorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteCollaboratorsRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteCollaborators",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Collaboration includes the app user are invitied to work on
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCollaborations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listCollaborations(
    _ request: Clarifai_Api_ListCollaborationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListCollaborationsRequest, Clarifai_Api_MultiCollaborationsResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListCollaborations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
  /// this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostAppDuplications.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postAppDuplications(
    _ request: Clarifai_Api_PostAppDuplicationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostAppDuplicationsRequest, Clarifai_Api_MultiAppDuplicationsResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostAppDuplications",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// list all the app duplications user triggers
  ///
  /// - Parameters:
  ///   - request: Request to send to ListAppDuplications.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listAppDuplications(
    _ request: Clarifai_Api_ListAppDuplicationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListAppDuplicationsRequest, Clarifai_Api_MultiAppDuplicationsResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListAppDuplications",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// get the app duplication status
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAppDuplication.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAppDuplication(
    _ request: Clarifai_Api_GetAppDuplicationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetAppDuplicationRequest, Clarifai_Api_SingleAppDuplicationResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetAppDuplication",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Add tasks to an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostTasks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postTasks(
    _ request: Clarifai_Api_PostTasksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostTasksRequest, Clarifai_Api_MultiTaskResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostTasks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get a specific task from an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTask(
    _ request: Clarifai_Api_GetTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetTaskRequest, Clarifai_Api_SingleTaskResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetTask",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List tasks from an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTasks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listTasks(
    _ request: Clarifai_Api_ListTasksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListTasksRequest, Clarifai_Api_MultiTaskResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListTasks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Patch one or more tasks.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchTasks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchTasks(
    _ request: Clarifai_Api_PatchTasksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PatchTasksRequest, Clarifai_Api_MultiTaskResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PatchTasks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete multiple tasks in one request.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteTasks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteTasks(
    _ request: Clarifai_Api_DeleteTasksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteTasksRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteTasks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Add a list of Collectors to an app.
  /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
  /// endpoint.
  /// Those current scopes are listed here as a hard requirement.
  /// They are needed when adding the collectors just so we now that you have permission with
  /// that key at least to do the writing to this app with POST /inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to PostCollectors.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postCollectors(
    _ request: Clarifai_Api_PostCollectorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostCollectorsRequest, Clarifai_Api_MultiCollectorResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostCollectors",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Get a specific collector from an app.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCollector.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCollector(
    _ request: Clarifai_Api_GetCollectorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_GetCollectorRequest, Clarifai_Api_SingleCollectorResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/GetCollector",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// List all the collectors.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCollectors.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listCollectors(
    _ request: Clarifai_Api_ListCollectorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_ListCollectorsRequest, Clarifai_Api_MultiCollectorResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/ListCollectors",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Patch one or more collectors.
  ///
  /// - Parameters:
  ///   - request: Request to send to PatchCollectors.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func patchCollectors(
    _ request: Clarifai_Api_PatchCollectorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PatchCollectorsRequest, Clarifai_Api_MultiCollectorResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PatchCollectors",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Delete multiple collectors in one request.
  /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteCollectors.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteCollectors(
    _ request: Clarifai_Api_DeleteCollectorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_DeleteCollectorsRequest, Clarifai_Api_Status_BaseResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/DeleteCollectors",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to PostStatValues
  ///
  /// - Parameters:
  ///   - request: Request to send to PostStatValues.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postStatValues(
    _ request: Clarifai_Api_PostStatValuesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostStatValuesRequest, Clarifai_Api_MultiStatValueResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostStatValues",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Unary call to PostStatValuesAggregate
  ///
  /// - Parameters:
  ///   - request: Request to send to PostStatValuesAggregate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postStatValuesAggregate(
    _ request: Clarifai_Api_PostStatValuesAggregateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Clarifai_Api_PostStatValuesAggregateRequest, Clarifai_Api_MultiStatValueAggregateResponse> {
    return self.makeUnaryCall(
      path: "/clarifai.api.V2/PostStatValuesAggregate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Clarifai_Api_V2Client: Clarifai_Api_V2ClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the clarifai.api.V2 service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Clarifai_Api_V2Provider: CallHandlerProvider {
  /// List all the concepts with their positive and negative counts
  func getConceptCounts(request: Clarifai_Api_GetConceptCountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiConceptCountResponse>
  /// Get a specific concept from an app.
  func getConcept(request: Clarifai_Api_GetConceptRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleConceptResponse>
  /// List all the concepts.
  func listConcepts(request: Clarifai_Api_ListConceptsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiConceptResponse>
  /// Search over the concepts to find one or more you're looking for.
  /// This leverage the "body" parameter because we also have page and
  /// per_page as url query param variables in this request.
  func postConceptsSearches(request: Clarifai_Api_PostConceptsSearchesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiConceptResponse>
  /// Add a concept to an app.
  func postConcepts(request: Clarifai_Api_PostConceptsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiConceptResponse>
  /// Patch one or more concepts.
  func patchConcepts(request: Clarifai_Api_PatchConceptsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiConceptResponse>
  /// Get a specific concept from an app.
  func getConceptLanguage(request: Clarifai_Api_GetConceptLanguageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleConceptLanguageResponse>
  /// List the concept in all the translated languages.
  func listConceptLanguages(request: Clarifai_Api_ListConceptLanguagesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiConceptLanguageResponse>
  /// Add a new tranlsation for this concept.
  func postConceptLanguages(request: Clarifai_Api_PostConceptLanguagesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiConceptLanguageResponse>
  /// Patch the name for a given language names by passing in a list of concepts with the new names
  /// for the languages.
  func patchConceptLanguages(request: Clarifai_Api_PatchConceptLanguagesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiConceptLanguageResponse>
  /// List concept relations between concepts in the platform.
  func listConceptRelations(request: Clarifai_Api_ListConceptRelationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiConceptRelationResponse>
  /// Post concept relations to create relations between concepts in the platform.
  func postConceptRelations(request: Clarifai_Api_PostConceptRelationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiConceptRelationResponse>
  /// Post concept relations to create relations between concepts in the platform.
  func deleteConceptRelations(request: Clarifai_Api_DeleteConceptRelationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// List all domain graphs.
  func listKnowledgeGraphs(request: Clarifai_Api_ListKnowledgeGraphsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiKnowledgeGraphResponse>
  /// Post domain graphs.
  func postKnowledgeGraphs(request: Clarifai_Api_PostKnowledgeGraphsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiKnowledgeGraphResponse>
  /// Start concept mapping jobs.
  func postConceptMappingJobs(request: Clarifai_Api_PostConceptMappingJobsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiConceptMappingJobResponse>
  /// Get a specific annotation from an app.
  func getAnnotation(request: Clarifai_Api_GetAnnotationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleAnnotationResponse>
  /// List all the annotation.
  func listAnnotations(request: Clarifai_Api_ListAnnotationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiAnnotationResponse>
  /// Post annotations.
  func postAnnotations(request: Clarifai_Api_PostAnnotationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiAnnotationResponse>
  /// Patch one or more annotations.
  func patchAnnotations(request: Clarifai_Api_PatchAnnotationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiAnnotationResponse>
  /// Delete a single annotation.
  func deleteAnnotation(request: Clarifai_Api_DeleteAnnotationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// Delete multiple annotations in one request.
  func deleteAnnotations(request: Clarifai_Api_DeleteAnnotationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// Execute a search over annotation
  func postAnnotationsSearches(request: Clarifai_Api_PostAnnotationsSearchesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiSearchResponse>
  /// Patch one or more inputs.
  func getInputCount(request: Clarifai_Api_GetInputCountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleInputCountResponse>
  /// Streams all the inputs starting from oldest assets.
  func streamInputs(request: Clarifai_Api_StreamInputsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiInputResponse>
  /// Get a specific input from an app.
  func getInput(request: Clarifai_Api_GetInputRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleInputResponse>
  /// List all the inputs.
  func listInputs(request: Clarifai_Api_ListInputsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiInputResponse>
  /// Add an input (or set of inputs) to an app.
  /// This call is synchronous if the PostInputsRequest contains exactly one image input. Otherwise,
  /// it is asynchronous.
  func postInputs(request: Clarifai_Api_PostInputsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiInputResponse>
  /// Patch one or more inputs.
  func patchInputs(request: Clarifai_Api_PatchInputsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiInputResponse>
  /// Delete a single input.  This call is synchronous.
  func deleteInput(request: Clarifai_Api_DeleteInputRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// Delete multiple inputs in one request.
  /// This call is asynchronous. Use DeleteInput if you want a synchronous version.
  func deleteInputs(request: Clarifai_Api_DeleteInputsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// Execute a search over input
  func postInputsSearches(request: Clarifai_Api_PostInputsSearchesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiSearchResponse>
  /// Get predicted outputs from the model.
  func postModelOutputs(request: Clarifai_Api_PostModelOutputsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiOutputResponse>
  /// Get a specific model type.
  func getModelType(request: Clarifai_Api_GetModelTypeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleModelTypeResponse>
  /// List all the model types available in the platform.
  func listModelTypes(request: Clarifai_Api_ListModelTypesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiModelTypeResponse>
  /// Get a specific model from an app.
  func getModel(request: Clarifai_Api_GetModelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleModelResponse>
  /// Get a the output info for a given model_id or model_id/version_id
  /// combo.
  func getModelOutputInfo(request: Clarifai_Api_GetModelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleModelResponse>
  /// List all the models.
  func listModels(request: Clarifai_Api_ListModelsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiModelResponse>
  /// Search over the models to find one or more you're looking for.
  /// This leverage the "body" parameter because we also have page and
  /// per_page as url query param variables in this request.
  func postModelsSearches(request: Clarifai_Api_PostModelsSearchesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiModelResponse>
  /// Add a models to an app.
  /// FIXME(zeiler): this should have been a plural response.
  func postModels(request: Clarifai_Api_PostModelsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleModelResponse>
  /// Patch one or more models.
  func patchModels(request: Clarifai_Api_PatchModelsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiModelResponse>
  /// Delete a single model.
  func deleteModel(request: Clarifai_Api_DeleteModelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// Delete multiple models in one request.
  func deleteModels(request: Clarifai_Api_DeleteModelsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// List all the inputs.
  func listModelInputs(request: Clarifai_Api_ListModelInputsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiInputResponse>
  /// Get a specific model from an app.
  func getModelVersion(request: Clarifai_Api_GetModelVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleModelVersionResponse>
  /// List all the models.
  func listModelVersions(request: Clarifai_Api_ListModelVersionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiModelVersionResponse>
  /// Create a new model version to trigger training of the model.
  /// FIXME(zeiler): this should have been a plural response.
  func postModelVersions(request: Clarifai_Api_PostModelVersionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleModelResponse>
  /// Delete a single model.
  func deleteModelVersion(request: Clarifai_Api_DeleteModelVersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// Get the evaluation metrics for a model version.
  func getModelVersionMetrics(request: Clarifai_Api_GetModelVersionMetricsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleModelVersionResponse>
  /// Run the evaluation metrics for a model version.
  func postModelVersionMetrics(request: Clarifai_Api_PostModelVersionMetricsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleModelVersionResponse>
  /// Get a specific workflow from an app.
  func getWorkflow(request: Clarifai_Api_GetWorkflowRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleWorkflowResponse>
  /// List all the workflows.
  func listWorkflows(request: Clarifai_Api_ListWorkflowsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiWorkflowResponse>
  /// Add a workflow to an app.
  func postWorkflows(request: Clarifai_Api_PostWorkflowsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiWorkflowResponse>
  /// Patch one or more workflows.
  func patchWorkflows(request: Clarifai_Api_PatchWorkflowsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiWorkflowResponse>
  /// Delete a single workflow.
  func deleteWorkflow(request: Clarifai_Api_DeleteWorkflowRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// Delete multiple workflows in one request.
  func deleteWorkflows(request: Clarifai_Api_DeleteWorkflowsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// Predict using a workflow.
  func postWorkflowResults(request: Clarifai_Api_PostWorkflowResultsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_PostWorkflowResultsResponse>
  func postWorkflowResultsSimilarity(request: Clarifai_Api_PostWorkflowResultsSimilarityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_PostWorkflowResultsSimilarityResponse>
  /// Get a specific key from an app.
  func getKey(request: Clarifai_Api_GetKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleKeyResponse>
  /// List all the keys.
  func listKeys(request: Clarifai_Api_ListKeysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiKeyResponse>
  /// List keys by app_id
  func listAppKeys(request: Clarifai_Api_ListAppKeysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiKeyResponse>
  /// Search over the keys to find one or more you're looking for.
  /// This leverage the "body" parameter because we also have page and
  /// per_page as url query param variables in this request.
  func deleteKey(request: Clarifai_Api_DeleteKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// Add a key to an app.
  func postKeys(request: Clarifai_Api_PostKeysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiKeyResponse>
  /// Patch one or more keys.
  func patchKeys(request: Clarifai_Api_PatchKeysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiKeyResponse>
  /// API Keys in the public API -- request is itself Key authorized, and will tell
  /// the user the scopes/access of the key/credential they're providing, as computed by
  /// our authorizer:
  func myScopes(request: Clarifai_Api_MyScopesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiScopeResponse>
  /// List all auth scopes available.
  func listScopes(request: Clarifai_Api_ListScopesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiScopeDepsResponse>
  /// Get a specific app from an app.
  func getApp(request: Clarifai_Api_GetAppRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleAppResponse>
  /// List all the apps.
  func listApps(request: Clarifai_Api_ListAppsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiAppResponse>
  /// Search over the apps to find one or more you're looking for.
  /// This leverage the "body" parameter because we also have page and
  /// per_page as url query param variables in this request.
  func deleteApp(request: Clarifai_Api_DeleteAppRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// Add a app to an app.
  /// This needs to load the default workflow to make a copy, validating all the models in it, and
  /// then writing the new workflow back to this new app.
  func postApps(request: Clarifai_Api_PostAppsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiAppResponse>
  /// Patch one or more apps.
  func patchApps(request: Clarifai_Api_PatchAppsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiAppResponse>
  /// Search over the applications to find one or more you're looking for.
  /// This leverage the "body" parameter because we also have page and
  /// per_page as url query param variables in this request.
  func postAppsSearches(request: Clarifai_Api_PostAppsSearchesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiAppResponse>
  /// Validate new password in real-time for a user
  func postValidatePassword(request: Clarifai_Api_PostValidatePasswordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SinglePasswordValidationResponse>
  /// Get a saved search.
  func getSearch(request: Clarifai_Api_GetSearchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleSearchResponse>
  /// List all saved searches.
  func listSearches(request: Clarifai_Api_ListSearchesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiSearchResponse>
  /// Execute a new search and optionally save it.
  func postSearches(request: Clarifai_Api_PostSearchesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiSearchResponse>
  /// Execute a previously saved search.
  func postSearchesByID(request: Clarifai_Api_PostSearchesByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiSearchResponse>
  /// Evaluate the results of two search requests
  func postAnnotationSearchMetrics(request: Clarifai_Api_PostAnnotationSearchMetricsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiAnnotationSearchMetricsResponse>
  /// Get the evaluation results between two search requests
  func getAnnotationSearchMetrics(request: Clarifai_Api_GetAnnotationSearchMetricsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiAnnotationSearchMetricsResponse>
  /// List the evaluation results between two search requests
  func listAnnotationSearchMetrics(request: Clarifai_Api_ListAnnotationSearchMetricsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiAnnotationSearchMetricsResponse>
  func deleteAnnotationSearchMetrics(request: Clarifai_Api_DeleteAnnotationSearchMetricsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// Delete a saved search.
  func deleteSearch(request: Clarifai_Api_DeleteSearchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// List all status codes.
  func listStatusCodes(request: Clarifai_Api_ListStatusCodesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiStatusCodeResponse>
  /// Get more details for a status code.
  func getStatusCode(request: Clarifai_Api_GetStatusCodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleStatusCodeResponse>
  /// owner list users who the app is shared with
  func listCollaborators(request: Clarifai_Api_ListCollaboratorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiCollaboratorsResponse>
  /// add collaborators to an app.
  func postCollaborators(request: Clarifai_Api_PostCollaboratorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiCollaboratorsResponse>
  /// Patch existing collaborators.
  func patchCollaborators(request: Clarifai_Api_PatchCollaboratorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiCollaboratorsResponse>
  /// Delete existing collaborators.
  func deleteCollaborators(request: Clarifai_Api_DeleteCollaboratorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// Collaboration includes the app user are invitied to work on
  func listCollaborations(request: Clarifai_Api_ListCollaborationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiCollaborationsResponse>
  /// start to duplicate an app which copies all the inputs, annotations, models, concepts etc. to a new app.
  /// this is an async process, you should use ListAppDuplications or GetAppDuplication to check the status.
  func postAppDuplications(request: Clarifai_Api_PostAppDuplicationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiAppDuplicationsResponse>
  /// list all the app duplications user triggers
  func listAppDuplications(request: Clarifai_Api_ListAppDuplicationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiAppDuplicationsResponse>
  /// get the app duplication status
  func getAppDuplication(request: Clarifai_Api_GetAppDuplicationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleAppDuplicationResponse>
  /// Add tasks to an app.
  func postTasks(request: Clarifai_Api_PostTasksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiTaskResponse>
  /// Get a specific task from an app.
  func getTask(request: Clarifai_Api_GetTaskRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleTaskResponse>
  /// List tasks from an app.
  func listTasks(request: Clarifai_Api_ListTasksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiTaskResponse>
  /// Patch one or more tasks.
  func patchTasks(request: Clarifai_Api_PatchTasksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiTaskResponse>
  /// Delete multiple tasks in one request.
  func deleteTasks(request: Clarifai_Api_DeleteTasksRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  /// Add a list of Collectors to an app.
  /// In the handler of this endpoint we also check for all the scopes of the  POST /inputs
  /// endpoint.
  /// Those current scopes are listed here as a hard requirement.
  /// They are needed when adding the collectors just so we now that you have permission with
  /// that key at least to do the writing to this app with POST /inputs.
  func postCollectors(request: Clarifai_Api_PostCollectorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiCollectorResponse>
  /// Get a specific collector from an app.
  func getCollector(request: Clarifai_Api_GetCollectorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_SingleCollectorResponse>
  /// List all the collectors.
  func listCollectors(request: Clarifai_Api_ListCollectorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiCollectorResponse>
  /// Patch one or more collectors.
  func patchCollectors(request: Clarifai_Api_PatchCollectorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiCollectorResponse>
  /// Delete multiple collectors in one request.
  /// This call is asynchronous. Use DeleteCollector if you want a synchronous version.
  func deleteCollectors(request: Clarifai_Api_DeleteCollectorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_Status_BaseResponse>
  func postStatValues(request: Clarifai_Api_PostStatValuesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiStatValueResponse>
  func postStatValuesAggregate(request: Clarifai_Api_PostStatValuesAggregateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Clarifai_Api_MultiStatValueAggregateResponse>
}

extension Clarifai_Api_V2Provider {
  public var serviceName: Substring { return "clarifai.api.V2" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GetConceptCounts":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getConceptCounts(request: request, context: context)
        }
      }

    case "GetConcept":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getConcept(request: request, context: context)
        }
      }

    case "ListConcepts":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listConcepts(request: request, context: context)
        }
      }

    case "PostConceptsSearches":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postConceptsSearches(request: request, context: context)
        }
      }

    case "PostConcepts":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postConcepts(request: request, context: context)
        }
      }

    case "PatchConcepts":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchConcepts(request: request, context: context)
        }
      }

    case "GetConceptLanguage":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getConceptLanguage(request: request, context: context)
        }
      }

    case "ListConceptLanguages":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listConceptLanguages(request: request, context: context)
        }
      }

    case "PostConceptLanguages":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postConceptLanguages(request: request, context: context)
        }
      }

    case "PatchConceptLanguages":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchConceptLanguages(request: request, context: context)
        }
      }

    case "ListConceptRelations":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listConceptRelations(request: request, context: context)
        }
      }

    case "PostConceptRelations":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postConceptRelations(request: request, context: context)
        }
      }

    case "DeleteConceptRelations":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteConceptRelations(request: request, context: context)
        }
      }

    case "ListKnowledgeGraphs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listKnowledgeGraphs(request: request, context: context)
        }
      }

    case "PostKnowledgeGraphs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postKnowledgeGraphs(request: request, context: context)
        }
      }

    case "PostConceptMappingJobs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postConceptMappingJobs(request: request, context: context)
        }
      }

    case "GetAnnotation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getAnnotation(request: request, context: context)
        }
      }

    case "ListAnnotations":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listAnnotations(request: request, context: context)
        }
      }

    case "PostAnnotations":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postAnnotations(request: request, context: context)
        }
      }

    case "PatchAnnotations":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchAnnotations(request: request, context: context)
        }
      }

    case "DeleteAnnotation":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteAnnotation(request: request, context: context)
        }
      }

    case "DeleteAnnotations":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteAnnotations(request: request, context: context)
        }
      }

    case "PostAnnotationsSearches":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postAnnotationsSearches(request: request, context: context)
        }
      }

    case "GetInputCount":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getInputCount(request: request, context: context)
        }
      }

    case "StreamInputs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.streamInputs(request: request, context: context)
        }
      }

    case "GetInput":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getInput(request: request, context: context)
        }
      }

    case "ListInputs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listInputs(request: request, context: context)
        }
      }

    case "PostInputs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postInputs(request: request, context: context)
        }
      }

    case "PatchInputs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchInputs(request: request, context: context)
        }
      }

    case "DeleteInput":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteInput(request: request, context: context)
        }
      }

    case "DeleteInputs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteInputs(request: request, context: context)
        }
      }

    case "PostInputsSearches":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postInputsSearches(request: request, context: context)
        }
      }

    case "PostModelOutputs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postModelOutputs(request: request, context: context)
        }
      }

    case "GetModelType":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getModelType(request: request, context: context)
        }
      }

    case "ListModelTypes":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listModelTypes(request: request, context: context)
        }
      }

    case "GetModel":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getModel(request: request, context: context)
        }
      }

    case "GetModelOutputInfo":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getModelOutputInfo(request: request, context: context)
        }
      }

    case "ListModels":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listModels(request: request, context: context)
        }
      }

    case "PostModelsSearches":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postModelsSearches(request: request, context: context)
        }
      }

    case "PostModels":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postModels(request: request, context: context)
        }
      }

    case "PatchModels":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchModels(request: request, context: context)
        }
      }

    case "DeleteModel":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteModel(request: request, context: context)
        }
      }

    case "DeleteModels":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteModels(request: request, context: context)
        }
      }

    case "ListModelInputs":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listModelInputs(request: request, context: context)
        }
      }

    case "GetModelVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getModelVersion(request: request, context: context)
        }
      }

    case "ListModelVersions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listModelVersions(request: request, context: context)
        }
      }

    case "PostModelVersions":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postModelVersions(request: request, context: context)
        }
      }

    case "DeleteModelVersion":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteModelVersion(request: request, context: context)
        }
      }

    case "GetModelVersionMetrics":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getModelVersionMetrics(request: request, context: context)
        }
      }

    case "PostModelVersionMetrics":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postModelVersionMetrics(request: request, context: context)
        }
      }

    case "GetWorkflow":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getWorkflow(request: request, context: context)
        }
      }

    case "ListWorkflows":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listWorkflows(request: request, context: context)
        }
      }

    case "PostWorkflows":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postWorkflows(request: request, context: context)
        }
      }

    case "PatchWorkflows":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchWorkflows(request: request, context: context)
        }
      }

    case "DeleteWorkflow":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteWorkflow(request: request, context: context)
        }
      }

    case "DeleteWorkflows":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteWorkflows(request: request, context: context)
        }
      }

    case "PostWorkflowResults":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postWorkflowResults(request: request, context: context)
        }
      }

    case "PostWorkflowResultsSimilarity":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postWorkflowResultsSimilarity(request: request, context: context)
        }
      }

    case "GetKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getKey(request: request, context: context)
        }
      }

    case "ListKeys":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listKeys(request: request, context: context)
        }
      }

    case "ListAppKeys":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listAppKeys(request: request, context: context)
        }
      }

    case "DeleteKey":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteKey(request: request, context: context)
        }
      }

    case "PostKeys":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postKeys(request: request, context: context)
        }
      }

    case "PatchKeys":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchKeys(request: request, context: context)
        }
      }

    case "MyScopes":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.myScopes(request: request, context: context)
        }
      }

    case "ListScopes":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listScopes(request: request, context: context)
        }
      }

    case "GetApp":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getApp(request: request, context: context)
        }
      }

    case "ListApps":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listApps(request: request, context: context)
        }
      }

    case "DeleteApp":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteApp(request: request, context: context)
        }
      }

    case "PostApps":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postApps(request: request, context: context)
        }
      }

    case "PatchApps":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchApps(request: request, context: context)
        }
      }

    case "PostAppsSearches":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postAppsSearches(request: request, context: context)
        }
      }

    case "PostValidatePassword":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postValidatePassword(request: request, context: context)
        }
      }

    case "GetSearch":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getSearch(request: request, context: context)
        }
      }

    case "ListSearches":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listSearches(request: request, context: context)
        }
      }

    case "PostSearches":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postSearches(request: request, context: context)
        }
      }

    case "PostSearchesByID":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postSearchesByID(request: request, context: context)
        }
      }

    case "PostAnnotationSearchMetrics":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postAnnotationSearchMetrics(request: request, context: context)
        }
      }

    case "GetAnnotationSearchMetrics":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getAnnotationSearchMetrics(request: request, context: context)
        }
      }

    case "ListAnnotationSearchMetrics":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listAnnotationSearchMetrics(request: request, context: context)
        }
      }

    case "DeleteAnnotationSearchMetrics":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteAnnotationSearchMetrics(request: request, context: context)
        }
      }

    case "DeleteSearch":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteSearch(request: request, context: context)
        }
      }

    case "ListStatusCodes":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listStatusCodes(request: request, context: context)
        }
      }

    case "GetStatusCode":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getStatusCode(request: request, context: context)
        }
      }

    case "ListCollaborators":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listCollaborators(request: request, context: context)
        }
      }

    case "PostCollaborators":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postCollaborators(request: request, context: context)
        }
      }

    case "PatchCollaborators":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchCollaborators(request: request, context: context)
        }
      }

    case "DeleteCollaborators":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteCollaborators(request: request, context: context)
        }
      }

    case "ListCollaborations":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listCollaborations(request: request, context: context)
        }
      }

    case "PostAppDuplications":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postAppDuplications(request: request, context: context)
        }
      }

    case "ListAppDuplications":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listAppDuplications(request: request, context: context)
        }
      }

    case "GetAppDuplication":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getAppDuplication(request: request, context: context)
        }
      }

    case "PostTasks":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postTasks(request: request, context: context)
        }
      }

    case "GetTask":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getTask(request: request, context: context)
        }
      }

    case "ListTasks":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listTasks(request: request, context: context)
        }
      }

    case "PatchTasks":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchTasks(request: request, context: context)
        }
      }

    case "DeleteTasks":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteTasks(request: request, context: context)
        }
      }

    case "PostCollectors":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postCollectors(request: request, context: context)
        }
      }

    case "GetCollector":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getCollector(request: request, context: context)
        }
      }

    case "ListCollectors":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listCollectors(request: request, context: context)
        }
      }

    case "PatchCollectors":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.patchCollectors(request: request, context: context)
        }
      }

    case "DeleteCollectors":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteCollectors(request: request, context: context)
        }
      }

    case "PostStatValues":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postStatValues(request: request, context: context)
        }
      }

    case "PostStatValuesAggregate":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.postStatValuesAggregate(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

